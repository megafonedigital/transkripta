{"ast":null,"code":"\"use strict\";\n'use client';\n\n/* eslint-disable no-constant-condition */\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFilterOptions = createFilterOptions;\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/utils\");\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nfunction createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction getInputValue(value, multiple, getOptionLabel, renderValue) {\n  if (multiple || value == null || renderValue) {\n    return '';\n  }\n  const optionLabel = getOptionLabel(value);\n  return typeof optionLabel === 'string' ? optionLabel : '';\n}\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = (0, _utils.unstable_useId)(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedItem, setFocusedItem] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n\n  // Calculate the initial inputValue on mount only.\n  // useRef ensures it doesn't update dynamically with defaultValue or value props.\n  const initialInputValue = React.useRef(getInputValue(defaultValue ?? valueProp, multiple, getOptionLabel)).current;\n  const [value, setValueState] = (0, _utils.unstable_useControlled)({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({\n    controlled: inputValueProp,\n    default: initialInputValue,\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    const newInputValue = getInputValue(newValue, multiple, getOptionLabel, renderValue);\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value, renderValue]);\n  const [open, setOpenState] = (0, _utils.unstable_useControlled)({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = (0, _utils.usePreviousProps)({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusItem = (0, _utils.unstable_useEventCallback)(itemToFocus => {\n    if (itemToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is gone.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      anchorEl.querySelector(`[${indexType}=\"${itemToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedItem is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedItem > value.length - 1) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n  }, [value, multiple, focusedItem, focusItem]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({\n    event,\n    index,\n    reason\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange && ['mouse', 'keyboard', 'touch'].includes(reason)) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({\n    event,\n    diff,\n    direction = 'next',\n    reason\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = (0, _utils.unstable_useEventCallback)(node => {\n    (0, _utils.unstable_setRef)(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validItemIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is removed.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      const option = anchorEl.querySelector(`[${indexType}=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusItem = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextItem = focusedItem;\n    if (focusedItem === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextItem = value.length - 1;\n      }\n    } else {\n      nextItem += direction === 'next' ? 1 : -1;\n      if (nextItem < 0) {\n        nextItem = 0;\n      }\n      if (nextItem === value.length) {\n        nextItem = -1;\n      }\n    }\n    nextItem = validItemIndex(nextItem, direction);\n    setFocusedItem(nextItem);\n    focusItem(nextItem);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedItem !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          if (!multiple && renderValue) {\n            focusItem(0);\n          } else {\n            handleFocusItem(event, 'previous');\n          }\n          break;\n        case 'ArrowRight':\n          if (!multiple && renderValue) {\n            focusItem(-1);\n          } else {\n            handleFocusItem(event, 'next');\n          }\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0 || renderValue)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedItem === -1 ? value.length - 1 : focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedItem !== -1) {\n            const index = focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleItemDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handleSingleItemDelete = event => {\n    handleValue(event, null, 'removeOption', {\n      option: value\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getItemProps: ({\n      index = 0\n    } = {}) => ({\n      ...(multiple && {\n        key: index\n      }),\n      ...(renderValue ? {\n        'data-item-index': index\n      } : {\n        'data-tag-index': index\n      }),\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: multiple ? handleItemDelete(index) : handleSingleItemDelete\n      })\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    // deprecated\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleItemDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedItem !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedItem,\n    // deprecated\n    focusedTag: focusedItem,\n    groupedOptions\n  };\n}\nvar _default = exports.default = useAutocomplete;","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","createFilterOptions","React","_utils","stripDiacritics","string","normalize","replace","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","startsWith","includes","slice","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","listboxRef","current","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","getInputValue","multiple","renderValue","optionLabel","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledProp","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionKey","getOptionLabelProp","label","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","readOnly","selectOnFocus","valueProp","unstable_useId","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","anchorEl","setAnchorEl","useState","focusedItem","setFocusedItem","defaultHighlighted","highlightedIndexRef","initialInputValue","setValueState","unstable_useControlled","controlled","name","setInputValueState","state","focused","setFocused","resetInputValue","useCallback","event","newValue","reason","isOptionSelected","length","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","previousProps","usePreviousProps","useEffect","valueChange","listboxAvailable","focusItem","unstable_useEventCallback","itemToFocus","focus","indexType","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","indexOf","setSelectionRange","getPreviousHighlightedOptionIndex","isSameValue","value1","label1","label2","every","val","i","previousHighlightedOption","findIndex","syncHighlightedIndex","previousHighlightedOptionIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","unstable_setRef","nodeName","warn","join","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validItemIndex","handleFocusItem","nextItem","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseMove","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleItemDelete","handleSingleItemDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","type","getItemProps","onDelete","getPopupIndicatorProps","getTagProps","getListboxProps","getOptionProps","selected","onMouseMove","onTouchStart","expanded","focusedTag","_default"],"sources":["C:/Users/Afonso/Desktop/Transkipta/frontend/node_modules/@mui/material/useAutocomplete/useAutocomplete.js"],"sourcesContent":["\"use strict\";\n'use client';\n\n/* eslint-disable no-constant-condition */\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFilterOptions = createFilterOptions;\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/utils\");\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nfunction createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction getInputValue(value, multiple, getOptionLabel, renderValue) {\n  if (multiple || value == null || renderValue) {\n    return '';\n  }\n  const optionLabel = getOptionLabel(value);\n  return typeof optionLabel === 'string' ? optionLabel : '';\n}\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = (0, _utils.unstable_useId)(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedItem, setFocusedItem] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n\n  // Calculate the initial inputValue on mount only.\n  // useRef ensures it doesn't update dynamically with defaultValue or value props.\n  const initialInputValue = React.useRef(getInputValue(defaultValue ?? valueProp, multiple, getOptionLabel)).current;\n  const [value, setValueState] = (0, _utils.unstable_useControlled)({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({\n    controlled: inputValueProp,\n    default: initialInputValue,\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    const newInputValue = getInputValue(newValue, multiple, getOptionLabel, renderValue);\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value, renderValue]);\n  const [open, setOpenState] = (0, _utils.unstable_useControlled)({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = (0, _utils.usePreviousProps)({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusItem = (0, _utils.unstable_useEventCallback)(itemToFocus => {\n    if (itemToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is gone.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      anchorEl.querySelector(`[${indexType}=\"${itemToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedItem is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedItem > value.length - 1) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n  }, [value, multiple, focusedItem, focusItem]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({\n    event,\n    index,\n    reason\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange && ['mouse', 'keyboard', 'touch'].includes(reason)) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({\n    event,\n    diff,\n    direction = 'next',\n    reason\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = (0, _utils.unstable_useEventCallback)(node => {\n    (0, _utils.unstable_setRef)(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validItemIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is removed.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      const option = anchorEl.querySelector(`[${indexType}=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusItem = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextItem = focusedItem;\n    if (focusedItem === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextItem = value.length - 1;\n      }\n    } else {\n      nextItem += direction === 'next' ? 1 : -1;\n      if (nextItem < 0) {\n        nextItem = 0;\n      }\n      if (nextItem === value.length) {\n        nextItem = -1;\n      }\n    }\n    nextItem = validItemIndex(nextItem, direction);\n    setFocusedItem(nextItem);\n    focusItem(nextItem);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedItem !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          if (!multiple && renderValue) {\n            focusItem(0);\n          } else {\n            handleFocusItem(event, 'previous');\n          }\n          break;\n        case 'ArrowRight':\n          if (!multiple && renderValue) {\n            focusItem(-1);\n          } else {\n            handleFocusItem(event, 'next');\n          }\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0 || renderValue)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedItem === -1 ? value.length - 1 : focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedItem !== -1) {\n            const index = focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleItemDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handleSingleItemDelete = event => {\n    handleValue(event, null, 'removeOption', {\n      option: value\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getItemProps: ({\n      index = 0\n    } = {}) => ({\n      ...(multiple && {\n        key: index\n      }),\n      ...(renderValue ? {\n        'data-item-index': index\n      } : {\n        'data-tag-index': index\n      }),\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: multiple ? handleItemDelete(index) : handleSingleItemDelete\n      })\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    // deprecated\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleItemDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedItem !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedItem,\n    // deprecated\n    focusedTag: focusedItem,\n    groupedOptions\n  };\n}\nvar _default = exports.default = useAutocomplete;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}