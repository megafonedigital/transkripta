{"ast":null,"code":"import axios from'axios';import config from'../config/env';// Configurações das APIs\nconst OPENAI_API_KEY=config.openai.apiKey;const OPENAI_API_URL=config.openai.baseUrl;const WEBHOOK_URL=config.webhook.url;const WEBHOOK_SECRET=config.webhook.secret;const WEBHOOK_TIMEOUT=config.webhook.timeout;const API_TIMEOUT=config.api.timeout;// Create axios instances\nconst openaiApi=axios.create({baseURL:OPENAI_API_URL,timeout:API_TIMEOUT,headers:{'Authorization':`Bearer ${OPENAI_API_KEY}`,'Content-Type':'application/json'}});// Webhook API instance\nconst webhookApi=axios.create({timeout:WEBHOOK_TIMEOUT,headers:{'Content-Type':'application/json','X-Webhook-Secret':WEBHOOK_SECRET}});// Video Processing Functions via Webhook\nexport const processVideoUrl=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log('Enviando URL para webhook:',url);const requestData={url:url,format:options.format||'mp4',quality:options.quality||'720p',audioOnly:options.audioOnly||false,timestamp:Date.now()};console.log('Dados da requisição webhook:',requestData);const response=await webhookApi.post(WEBHOOK_URL,requestData);console.log('Resposta do webhook:',response.data);// Nova estrutura de resposta: array com objetos contendo status, url e filename\nif(response.data&&Array.isArray(response.data)&&response.data.length>0){const videoData=response.data[0];// Pega o primeiro item do array\nif(videoData.status==='tunnel'&&videoData.url&&videoData.filename){return{status:videoData.status,videoUrl:videoData.url,audioUrl:videoData.url,// Mesmo URL para áudio e vídeo no tunnel\ntitle:videoData.filename.replace(/\\.[^/.]+$/,''),// Remove extensão do filename\nfilename:videoData.filename,tunnelUrl:videoData.url};}}// Fallback para estrutura antiga se necessário\nif(response.data&&response.data.success){return{videoUrl:response.data.videoUrl,audioUrl:response.data.audioUrl,title:response.data.title,duration:response.data.duration,thumbnail:response.data.thumbnail};}throw new Error('Webhook não retornou dados válidos');}catch(error){console.error('Erro no processamento via webhook:',error);throw handleApiError(error);}};// Download file from URL\nexport const downloadFromUrl=async(url,filename)=>{try{console.log('Fazendo download do arquivo:',url);const response=await axios.get(url,{responseType:'blob',timeout:API_TIMEOUT*3,// Mais tempo para download de arquivos grandes\nonDownloadProgress:progressEvent=>{if(progressEvent.total){const progress=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(`Download progress: ${progress}%`);}}});// Create download link\nconst blob=new Blob([response.data]);const downloadUrl=window.URL.createObjectURL(blob);const link=document.createElement('a');link.href=downloadUrl;link.download=filename||'download';document.body.appendChild(link);link.click();document.body.removeChild(link);window.URL.revokeObjectURL(downloadUrl);return response.data;}catch(error){console.error('Erro no download do arquivo:',error);throw handleApiError(error);}};// Process tunnel URL for transcription\nexport const processTunnelUrl=async tunnelUrl=>{try{console.log('Processando URL do tunnel para transcrição:',tunnelUrl);const response=await axios.get(tunnelUrl,{responseType:'blob',timeout:API_TIMEOUT*5,// Mais tempo para arquivos grandes\nonDownloadProgress:progressEvent=>{if(progressEvent.total){const progress=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(`Download progress: ${progress}%`);}}});// Return blob for transcription\nreturn response.data;}catch(error){console.error('Erro ao processar URL do tunnel:',error);throw handleApiError(error);}};// Get direct download link for social download\nexport const getTunnelDownloadInfo=videoData=>{if(videoData.status==='tunnel'&&videoData.tunnelUrl){return{downloadUrl:videoData.tunnelUrl,filename:videoData.filename,title:videoData.title};}// Fallback para estrutura antiga\nreturn{downloadUrl:videoData.videoUrl||videoData.audioUrl,filename:videoData.title?`${videoData.title}.mp4`:'download.mp4',title:videoData.title};};// Webhook processing functions replace previous download methods\n// Transcription Functions\nexport const transcribeAudio=async function(audioFile){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const formData=new FormData();formData.append('file',audioFile);formData.append('model',options.model||'whisper-1');if(options.language){formData.append('language',options.language);}if(options.prompt){formData.append('prompt',options.prompt);}const response=await openaiApi.post('/audio/transcriptions',formData,{headers:{'Content-Type':'multipart/form-data'}});return{text:response.data.text,language:response.data.language||options.language,duration:response.data.duration};}catch(error){console.error('Erro na transcrição:',error);throw new Error(`Falha na transcrição: ${error.message}`);}};// Utility Functions\nconst extractVideoId=url=>{const regex=/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;const match=url.match(regex);return match?match[1]:null;};export const validateVideoUrl=url=>{const patterns={youtube:/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,instagram:/(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,tiktok:/(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/};for(const[platform,pattern]of Object.entries(patterns)){if(pattern.test(url)){return platform;}}return null;};// File Processing\nexport const convertToAudio=async videoBlob=>{return new Promise((resolve,reject)=>{const audio=document.createElement('audio');const url=URL.createObjectURL(videoBlob);audio.src=url;audio.addEventListener('loadedmetadata',()=>{// For now, we'll return the original blob\n// In a real implementation, you might want to use FFmpeg.js\nresolve(videoBlob);URL.revokeObjectURL(url);});audio.addEventListener('error',()=>{reject(new Error('Erro ao processar o arquivo de áudio'));URL.revokeObjectURL(url);});});};// Error Handling\nexport const handleApiError=error=>{if(error.response){var _error$response$data;// Server responded with error status\nconst status=error.response.status;const message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message;switch(status){case 401:return'Chave de API inválida ou expirada';case 403:return'Acesso negado. Verifique suas permissões';case 429:return'Limite de requisições excedido. Tente novamente mais tarde';case 500:return'Erro interno do servidor';default:return`Erro ${status}: ${message}`;}}else if(error.request){// Network error\nreturn'Erro de conexão. Verifique sua internet';}else{// Other error\nreturn error.message||'Erro desconhecido';}};","map":{"version":3,"names":["axios","config","OPENAI_API_KEY","openai","apiKey","OPENAI_API_URL","baseUrl","WEBHOOK_URL","webhook","url","WEBHOOK_SECRET","secret","WEBHOOK_TIMEOUT","timeout","API_TIMEOUT","api","openaiApi","create","baseURL","headers","webhookApi","processVideoUrl","options","arguments","length","undefined","console","log","requestData","format","quality","audioOnly","timestamp","Date","now","response","post","data","Array","isArray","videoData","status","filename","videoUrl","audioUrl","title","replace","tunnelUrl","success","duration","thumbnail","Error","error","handleApiError","downloadFromUrl","get","responseType","onDownloadProgress","progressEvent","total","progress","Math","round","loaded","blob","Blob","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","processTunnelUrl","getTunnelDownloadInfo","transcribeAudio","audioFile","formData","FormData","append","model","language","prompt","text","message","extractVideoId","regex","match","validateVideoUrl","patterns","youtube","instagram","tiktok","platform","pattern","Object","entries","test","convertToAudio","videoBlob","Promise","resolve","reject","audio","src","addEventListener","_error$response$data","request"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport config from '../config/env';\r\n\r\n// Configurações das APIs\r\nconst OPENAI_API_KEY = config.openai.apiKey;\r\nconst OPENAI_API_URL = config.openai.baseUrl;\r\nconst WEBHOOK_URL = config.webhook.url;\r\nconst WEBHOOK_SECRET = config.webhook.secret;\r\nconst WEBHOOK_TIMEOUT = config.webhook.timeout;\r\nconst API_TIMEOUT = config.api.timeout;\r\n\r\n// Create axios instances\r\nconst openaiApi = axios.create({\r\n  baseURL: OPENAI_API_URL,\r\n  timeout: API_TIMEOUT,\r\n  headers: {\r\n    'Authorization': `Bearer ${OPENAI_API_KEY}`,\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Webhook API instance\r\nconst webhookApi = axios.create({\r\n  timeout: WEBHOOK_TIMEOUT,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'X-Webhook-Secret': WEBHOOK_SECRET\r\n  }\r\n});\r\n\r\n// Video Processing Functions via Webhook\r\nexport const processVideoUrl = async (url, options = {}) => {\r\n  try {\r\n    console.log('Enviando URL para webhook:', url);\r\n    \r\n    const requestData = {\r\n      url: url,\r\n      format: options.format || 'mp4',\r\n      quality: options.quality || '720p',\r\n      audioOnly: options.audioOnly || false,\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    console.log('Dados da requisição webhook:', requestData);\r\n    \r\n    const response = await webhookApi.post(WEBHOOK_URL, requestData);\r\n    \r\n    console.log('Resposta do webhook:', response.data);\r\n    \r\n    // Nova estrutura de resposta: array com objetos contendo status, url e filename\r\n    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\r\n      const videoData = response.data[0]; // Pega o primeiro item do array\r\n      \r\n      if (videoData.status === 'tunnel' && videoData.url && videoData.filename) {\r\n        return {\r\n          status: videoData.status,\r\n          videoUrl: videoData.url,\r\n          audioUrl: videoData.url, // Mesmo URL para áudio e vídeo no tunnel\r\n          title: videoData.filename.replace(/\\.[^/.]+$/, ''), // Remove extensão do filename\r\n          filename: videoData.filename,\r\n          tunnelUrl: videoData.url\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Fallback para estrutura antiga se necessário\r\n    if (response.data && response.data.success) {\r\n      return {\r\n        videoUrl: response.data.videoUrl,\r\n        audioUrl: response.data.audioUrl,\r\n        title: response.data.title,\r\n        duration: response.data.duration,\r\n        thumbnail: response.data.thumbnail\r\n      };\r\n    }\r\n    \r\n    throw new Error('Webhook não retornou dados válidos');\r\n  } catch (error) {\r\n    console.error('Erro no processamento via webhook:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Download file from URL\r\nexport const downloadFromUrl = async (url, filename) => {\r\n  try {\r\n    console.log('Fazendo download do arquivo:', url);\r\n    \r\n    const response = await axios.get(url, {\r\n      responseType: 'blob',\r\n      timeout: API_TIMEOUT * 3, // Mais tempo para download de arquivos grandes\r\n      onDownloadProgress: (progressEvent) => {\r\n        if (progressEvent.total) {\r\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          console.log(`Download progress: ${progress}%`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Create download link\r\n    const blob = new Blob([response.data]);\r\n    const downloadUrl = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.download = filename || 'download';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(downloadUrl);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro no download do arquivo:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Process tunnel URL for transcription\r\nexport const processTunnelUrl = async (tunnelUrl) => {\r\n  try {\r\n    console.log('Processando URL do tunnel para transcrição:', tunnelUrl);\r\n    \r\n    const response = await axios.get(tunnelUrl, {\r\n      responseType: 'blob',\r\n      timeout: API_TIMEOUT * 5, // Mais tempo para arquivos grandes\r\n      onDownloadProgress: (progressEvent) => {\r\n        if (progressEvent.total) {\r\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          console.log(`Download progress: ${progress}%`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Return blob for transcription\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao processar URL do tunnel:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Get direct download link for social download\r\nexport const getTunnelDownloadInfo = (videoData) => {\r\n  if (videoData.status === 'tunnel' && videoData.tunnelUrl) {\r\n    return {\r\n      downloadUrl: videoData.tunnelUrl,\r\n      filename: videoData.filename,\r\n      title: videoData.title\r\n    };\r\n  }\r\n  \r\n  // Fallback para estrutura antiga\r\n  return {\r\n    downloadUrl: videoData.videoUrl || videoData.audioUrl,\r\n    filename: videoData.title ? `${videoData.title}.mp4` : 'download.mp4',\r\n    title: videoData.title\r\n  };\r\n};\r\n\r\n// Webhook processing functions replace previous download methods\r\n\r\n// Transcription Functions\r\nexport const transcribeAudio = async (audioFile, options = {}) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', audioFile);\r\n    formData.append('model', options.model || 'whisper-1');\r\n    \r\n    if (options.language) {\r\n      formData.append('language', options.language);\r\n    }\r\n    \r\n    if (options.prompt) {\r\n      formData.append('prompt', options.prompt);\r\n    }\r\n    \r\n    const response = await openaiApi.post('/audio/transcriptions', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return {\r\n      text: response.data.text,\r\n      language: response.data.language || options.language,\r\n      duration: response.data.duration\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro na transcrição:', error);\r\n    throw new Error(`Falha na transcrição: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Utility Functions\r\nconst extractVideoId = (url) => {\r\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\r\n  const match = url.match(regex);\r\n  return match ? match[1] : null;\r\n};\r\n\r\nexport const validateVideoUrl = (url) => {\r\n  const patterns = {\r\n    youtube: /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,\r\n    instagram: /(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,\r\n    tiktok: /(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/\r\n  };\r\n  \r\n  for (const [platform, pattern] of Object.entries(patterns)) {\r\n    if (pattern.test(url)) {\r\n      return platform;\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// File Processing\r\nexport const convertToAudio = async (videoBlob) => {\r\n  return new Promise((resolve, reject) => {\r\n    const audio = document.createElement('audio');\r\n    const url = URL.createObjectURL(videoBlob);\r\n    \r\n    audio.src = url;\r\n    audio.addEventListener('loadedmetadata', () => {\r\n      // For now, we'll return the original blob\r\n      // In a real implementation, you might want to use FFmpeg.js\r\n      resolve(videoBlob);\r\n      URL.revokeObjectURL(url);\r\n    });\r\n    \r\n    audio.addEventListener('error', () => {\r\n      reject(new Error('Erro ao processar o arquivo de áudio'));\r\n      URL.revokeObjectURL(url);\r\n    });\r\n  });\r\n};\r\n\r\n// Error Handling\r\nexport const handleApiError = (error) => {\r\n  if (error.response) {\r\n    // Server responded with error status\r\n    const status = error.response.status;\r\n    const message = error.response.data?.message || error.message;\r\n    \r\n    switch (status) {\r\n      case 401:\r\n        return 'Chave de API inválida ou expirada';\r\n      case 403:\r\n        return 'Acesso negado. Verifique suas permissões';\r\n      case 429:\r\n        return 'Limite de requisições excedido. Tente novamente mais tarde';\r\n      case 500:\r\n        return 'Erro interno do servidor';\r\n      default:\r\n        return `Erro ${status}: ${message}`;\r\n    }\r\n  } else if (error.request) {\r\n    // Network error\r\n    return 'Erro de conexão. Verifique sua internet';\r\n  } else {\r\n    // Other error\r\n    return error.message || 'Erro desconhecido';\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,eAAe,CAElC;AACA,KAAM,CAAAC,cAAc,CAAGD,MAAM,CAACE,MAAM,CAACC,MAAM,CAC3C,KAAM,CAAAC,cAAc,CAAGJ,MAAM,CAACE,MAAM,CAACG,OAAO,CAC5C,KAAM,CAAAC,WAAW,CAAGN,MAAM,CAACO,OAAO,CAACC,GAAG,CACtC,KAAM,CAAAC,cAAc,CAAGT,MAAM,CAACO,OAAO,CAACG,MAAM,CAC5C,KAAM,CAAAC,eAAe,CAAGX,MAAM,CAACO,OAAO,CAACK,OAAO,CAC9C,KAAM,CAAAC,WAAW,CAAGb,MAAM,CAACc,GAAG,CAACF,OAAO,CAEtC;AACA,KAAM,CAAAG,SAAS,CAAGhB,KAAK,CAACiB,MAAM,CAAC,CAC7BC,OAAO,CAAEb,cAAc,CACvBQ,OAAO,CAAEC,WAAW,CACpBK,OAAO,CAAE,CACP,eAAe,CAAE,UAAUjB,cAAc,EAAE,CAC3C,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAkB,UAAU,CAAGpB,KAAK,CAACiB,MAAM,CAAC,CAC9BJ,OAAO,CAAED,eAAe,CACxBO,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,kBAAkB,CAAET,cACtB,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAW,eAAe,CAAG,cAAAA,CAAOZ,GAAG,CAAmB,IAAjB,CAAAa,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACrD,GAAI,CACFG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAElB,GAAG,CAAC,CAE9C,KAAM,CAAAmB,WAAW,CAAG,CAClBnB,GAAG,CAAEA,GAAG,CACRoB,MAAM,CAAEP,OAAO,CAACO,MAAM,EAAI,KAAK,CAC/BC,OAAO,CAAER,OAAO,CAACQ,OAAO,EAAI,MAAM,CAClCC,SAAS,CAAET,OAAO,CAACS,SAAS,EAAI,KAAK,CACrCC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAEDR,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEC,WAAW,CAAC,CAExD,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAf,UAAU,CAACgB,IAAI,CAAC7B,WAAW,CAAEqB,WAAW,CAAC,CAEhEF,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEQ,QAAQ,CAACE,IAAI,CAAC,CAElD;AACA,GAAIF,QAAQ,CAACE,IAAI,EAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACE,IAAI,CAAC,EAAIF,QAAQ,CAACE,IAAI,CAACb,MAAM,CAAG,CAAC,CAAE,CAC7E,KAAM,CAAAgB,SAAS,CAAGL,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAE;AAEpC,GAAIG,SAAS,CAACC,MAAM,GAAK,QAAQ,EAAID,SAAS,CAAC/B,GAAG,EAAI+B,SAAS,CAACE,QAAQ,CAAE,CACxE,MAAO,CACLD,MAAM,CAAED,SAAS,CAACC,MAAM,CACxBE,QAAQ,CAAEH,SAAS,CAAC/B,GAAG,CACvBmC,QAAQ,CAAEJ,SAAS,CAAC/B,GAAG,CAAE;AACzBoC,KAAK,CAAEL,SAAS,CAACE,QAAQ,CAACI,OAAO,CAAC,WAAW,CAAE,EAAE,CAAC,CAAE;AACpDJ,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BK,SAAS,CAAEP,SAAS,CAAC/B,GACvB,CAAC,CACH,CACF,CAEA;AACA,GAAI0B,QAAQ,CAACE,IAAI,EAAIF,QAAQ,CAACE,IAAI,CAACW,OAAO,CAAE,CAC1C,MAAO,CACLL,QAAQ,CAAER,QAAQ,CAACE,IAAI,CAACM,QAAQ,CAChCC,QAAQ,CAAET,QAAQ,CAACE,IAAI,CAACO,QAAQ,CAChCC,KAAK,CAAEV,QAAQ,CAACE,IAAI,CAACQ,KAAK,CAC1BI,QAAQ,CAAEd,QAAQ,CAACE,IAAI,CAACY,QAAQ,CAChCC,SAAS,CAAEf,QAAQ,CAACE,IAAI,CAACa,SAC3B,CAAC,CACH,CAEA,KAAM,IAAI,CAAAC,KAAK,CAAC,oCAAoC,CAAC,CACvD,CAAE,MAAOC,KAAK,CAAE,CACd1B,OAAO,CAAC0B,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,KAAM,CAAAC,cAAc,CAACD,KAAK,CAAC,CAC7B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,eAAe,CAAG,KAAAA,CAAO7C,GAAG,CAAEiC,QAAQ,GAAK,CACtD,GAAI,CACFhB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAElB,GAAG,CAAC,CAEhD,KAAM,CAAA0B,QAAQ,CAAG,KAAM,CAAAnC,KAAK,CAACuD,GAAG,CAAC9C,GAAG,CAAE,CACpC+C,YAAY,CAAE,MAAM,CACpB3C,OAAO,CAAEC,WAAW,CAAG,CAAC,CAAE;AAC1B2C,kBAAkB,CAAGC,aAAa,EAAK,CACrC,GAAIA,aAAa,CAACC,KAAK,CAAE,CACvB,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAACK,MAAM,CAAG,GAAG,CAAIL,aAAa,CAACC,KAAK,CAAC,CAC/EjC,OAAO,CAACC,GAAG,CAAC,sBAAsBiC,QAAQ,GAAG,CAAC,CAChD,CACF,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAI,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC9B,QAAQ,CAACE,IAAI,CAAC,CAAC,CACtC,KAAM,CAAA6B,WAAW,CAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC,CACpD,KAAM,CAAAM,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGP,WAAW,CACvBI,IAAI,CAACI,QAAQ,CAAGhC,QAAQ,EAAI,UAAU,CACtC6B,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC,CAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC,CACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC,CAC/BH,MAAM,CAACC,GAAG,CAACW,eAAe,CAACb,WAAW,CAAC,CAEvC,MAAO,CAAA/B,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOe,KAAK,CAAE,CACd1B,OAAO,CAAC0B,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAC,cAAc,CAACD,KAAK,CAAC,CAC7B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAA4B,gBAAgB,CAAG,KAAO,CAAAjC,SAAS,EAAK,CACnD,GAAI,CACFrB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAEoB,SAAS,CAAC,CAErE,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAnC,KAAK,CAACuD,GAAG,CAACR,SAAS,CAAE,CAC1CS,YAAY,CAAE,MAAM,CACpB3C,OAAO,CAAEC,WAAW,CAAG,CAAC,CAAE;AAC1B2C,kBAAkB,CAAGC,aAAa,EAAK,CACrC,GAAIA,aAAa,CAACC,KAAK,CAAE,CACvB,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAACK,MAAM,CAAG,GAAG,CAAIL,aAAa,CAACC,KAAK,CAAC,CAC/EjC,OAAO,CAACC,GAAG,CAAC,sBAAsBiC,QAAQ,GAAG,CAAC,CAChD,CACF,CACF,CAAC,CAAC,CAEF;AACA,MAAO,CAAAzB,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOe,KAAK,CAAE,CACd1B,OAAO,CAAC0B,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,KAAM,CAAAC,cAAc,CAACD,KAAK,CAAC,CAC7B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAA6B,qBAAqB,CAAIzC,SAAS,EAAK,CAClD,GAAIA,SAAS,CAACC,MAAM,GAAK,QAAQ,EAAID,SAAS,CAACO,SAAS,CAAE,CACxD,MAAO,CACLmB,WAAW,CAAE1B,SAAS,CAACO,SAAS,CAChCL,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BG,KAAK,CAAEL,SAAS,CAACK,KACnB,CAAC,CACH,CAEA;AACA,MAAO,CACLqB,WAAW,CAAE1B,SAAS,CAACG,QAAQ,EAAIH,SAAS,CAACI,QAAQ,CACrDF,QAAQ,CAAEF,SAAS,CAACK,KAAK,CAAG,GAAGL,SAAS,CAACK,KAAK,MAAM,CAAG,cAAc,CACrEA,KAAK,CAAEL,SAAS,CAACK,KACnB,CAAC,CACH,CAAC,CAED;AAEA;AACA,MAAO,MAAM,CAAAqC,eAAe,CAAG,cAAAA,CAAOC,SAAS,CAAmB,IAAjB,CAAA7D,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC3D,GAAI,CACF,KAAM,CAAA6D,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,SAAS,CAAC,CAClCC,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEhE,OAAO,CAACiE,KAAK,EAAI,WAAW,CAAC,CAEtD,GAAIjE,OAAO,CAACkE,QAAQ,CAAE,CACpBJ,QAAQ,CAACE,MAAM,CAAC,UAAU,CAAEhE,OAAO,CAACkE,QAAQ,CAAC,CAC/C,CAEA,GAAIlE,OAAO,CAACmE,MAAM,CAAE,CAClBL,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAEhE,OAAO,CAACmE,MAAM,CAAC,CAC3C,CAEA,KAAM,CAAAtD,QAAQ,CAAG,KAAM,CAAAnB,SAAS,CAACoB,IAAI,CAAC,uBAAuB,CAAEgD,QAAQ,CAAE,CACvEjE,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAAC,CAEF,MAAO,CACLuE,IAAI,CAAEvD,QAAQ,CAACE,IAAI,CAACqD,IAAI,CACxBF,QAAQ,CAAErD,QAAQ,CAACE,IAAI,CAACmD,QAAQ,EAAIlE,OAAO,CAACkE,QAAQ,CACpDvC,QAAQ,CAAEd,QAAQ,CAACE,IAAI,CAACY,QAC1B,CAAC,CACH,CAAE,MAAOG,KAAK,CAAE,CACd1B,OAAO,CAAC0B,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,IAAI,CAAAD,KAAK,CAAC,yBAAyBC,KAAK,CAACuC,OAAO,EAAE,CAAC,CAC3D,CACF,CAAC,CAED;AACA,KAAM,CAAAC,cAAc,CAAInF,GAAG,EAAK,CAC9B,KAAM,CAAAoF,KAAK,CAAG,4FAA4F,CAC1G,KAAM,CAAAC,KAAK,CAAGrF,GAAG,CAACqF,KAAK,CAACD,KAAK,CAAC,CAC9B,MAAO,CAAAC,KAAK,CAAGA,KAAK,CAAC,CAAC,CAAC,CAAG,IAAI,CAChC,CAAC,CAED,MAAO,MAAM,CAAAC,gBAAgB,CAAItF,GAAG,EAAK,CACvC,KAAM,CAAAuF,QAAQ,CAAG,CACfC,OAAO,CAAE,4EAA4E,CACrFC,SAAS,CAAE,qCAAqC,CAChDC,MAAM,CAAE,qDACV,CAAC,CAED,IAAK,KAAM,CAACC,QAAQ,CAAEC,OAAO,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAC,CAAE,CAC1D,GAAIK,OAAO,CAACG,IAAI,CAAC/F,GAAG,CAAC,CAAE,CACrB,MAAO,CAAA2F,QAAQ,CACjB,CACF,CAEA,MAAO,KAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,cAAc,CAAG,KAAO,CAAAC,SAAS,EAAK,CACjD,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,KAAK,CAAGvC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAC7C,KAAM,CAAA/D,GAAG,CAAG2D,GAAG,CAACC,eAAe,CAACqC,SAAS,CAAC,CAE1CI,KAAK,CAACC,GAAG,CAAGtG,GAAG,CACfqG,KAAK,CAACE,gBAAgB,CAAC,gBAAgB,CAAE,IAAM,CAC7C;AACA;AACAJ,OAAO,CAACF,SAAS,CAAC,CAClBtC,GAAG,CAACW,eAAe,CAACtE,GAAG,CAAC,CAC1B,CAAC,CAAC,CAEFqG,KAAK,CAACE,gBAAgB,CAAC,OAAO,CAAE,IAAM,CACpCH,MAAM,CAAC,GAAI,CAAA1D,KAAK,CAAC,sCAAsC,CAAC,CAAC,CACzDiB,GAAG,CAACW,eAAe,CAACtE,GAAG,CAAC,CAC1B,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAA4C,cAAc,CAAID,KAAK,EAAK,CACvC,GAAIA,KAAK,CAACjB,QAAQ,CAAE,KAAA8E,oBAAA,CAClB;AACA,KAAM,CAAAxE,MAAM,CAAGW,KAAK,CAACjB,QAAQ,CAACM,MAAM,CACpC,KAAM,CAAAkD,OAAO,CAAG,EAAAsB,oBAAA,CAAA7D,KAAK,CAACjB,QAAQ,CAACE,IAAI,UAAA4E,oBAAA,iBAAnBA,oBAAA,CAAqBtB,OAAO,GAAIvC,KAAK,CAACuC,OAAO,CAE7D,OAAQlD,MAAM,EACZ,IAAK,IAAG,CACN,MAAO,mCAAmC,CAC5C,IAAK,IAAG,CACN,MAAO,0CAA0C,CACnD,IAAK,IAAG,CACN,MAAO,4DAA4D,CACrE,IAAK,IAAG,CACN,MAAO,0BAA0B,CACnC,QACE,MAAO,QAAQA,MAAM,KAAKkD,OAAO,EAAE,CACvC,CACF,CAAC,IAAM,IAAIvC,KAAK,CAAC8D,OAAO,CAAE,CACxB;AACA,MAAO,yCAAyC,CAClD,CAAC,IAAM,CACL;AACA,MAAO,CAAA9D,KAAK,CAACuC,OAAO,EAAI,mBAAmB,CAC7C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}