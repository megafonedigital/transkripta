{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport { v4 as uuidv4 } from 'uuid';\nimport config from '../config/env';\n\n// Local Authentication Service\nconst JWT_SECRET = config.auth.jwtSecret;\nconst SESSION_TIMEOUT = config.auth.sessionTimeout;\n\n// Simple JWT-like token generation (for demo purposes)\nconst generateToken = userData => {\n  const payload = {\n    ...userData,\n    exp: Date.now() + SESSION_TIMEOUT,\n    iat: Date.now()\n  };\n\n  // In a real app, you'd use a proper JWT library\n  return btoa(JSON.stringify(payload));\n};\nconst decodeToken = token => {\n  try {\n    return JSON.parse(atob(token));\n  } catch (error) {\n    return null;\n  }\n};\n\n// Default users (in a real app, this would be handled by a proper auth service)\nconst DEFAULT_USERS = [{\n  id: 1,\n  username: 'admin',\n  email: 'admin@transkipta.com',\n  password: 'admin123',\n  // In production, this would be hashed\n  role: 'admin'\n}, {\n  id: 2,\n  username: 'user',\n  email: 'user@transkipta.com',\n  password: 'user123',\n  role: 'user'\n}];\n\n// Storage keys\nconst STORAGE_KEYS = {\n  TOKEN: 'transkipta_token',\n  USER: 'transkipta_user',\n  USERS: 'transkipta_users'\n};\n\n// Initialize default users if not exists\nconst initializeUsers = () => {\n  const existingUsers = localStorage.getItem(STORAGE_KEYS.USERS);\n  if (!existingUsers) {\n    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(DEFAULT_USERS));\n  }\n};\n\n// Authentication functions\nexport const login = async (username, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        const user = users.find(u => (u.username === username || u.email === username) && u.password === password);\n        if (user) {\n          const token = generateToken({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          });\n          const userData = {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          };\n          localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\n          resolve({\n            token,\n            user: userData\n          });\n        } else {\n          reject(new Error('Credenciais inválidas'));\n        }\n      } catch (error) {\n        reject(new Error('Erro interno de autenticação'));\n      }\n    }, 500); // Simulate network delay\n  });\n};\nexport const logout = () => {\n  localStorage.removeItem(STORAGE_KEYS.TOKEN);\n  localStorage.removeItem(STORAGE_KEYS.USER);\n};\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userStr = localStorage.getItem(STORAGE_KEYS.USER);\n    if (!token || !userStr) {\n      return null;\n    }\n    const tokenData = decodeToken(token);\n    if (!tokenData || tokenData.exp < Date.now()) {\n      // Token expired\n      logout();\n      return null;\n    }\n    return JSON.parse(userStr);\n  } catch (error) {\n    logout();\n    return null;\n  }\n};\nexport const getToken = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return null;\n  const tokenData = decodeToken(token);\n  if (!tokenData || tokenData.exp < Date.now()) {\n    logout();\n    return null;\n  }\n  return token;\n};\nexport const isAuthenticated = () => {\n  return getCurrentUser() !== null;\n};\nexport const hasRole = requiredRole => {\n  const user = getCurrentUser();\n  if (!user) return false;\n  const roleHierarchy = {\n    'user': 1,\n    'admin': 2\n  };\n  const userLevel = roleHierarchy[user.role] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n  return userLevel >= requiredLevel;\n};\n\n// User management functions\nexport const registerUser = async userData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n\n        // Check if user already exists\n        const existingUser = users.find(u => u.username === userData.username || u.email === userData.email);\n        if (existingUser) {\n          reject(new Error('Usuário já existe'));\n          return;\n        }\n        const newUser = {\n          id: Date.now(),\n          username: userData.username,\n          email: userData.email,\n          password: userData.password,\n          // In production, hash this\n          role: userData.role || 'user',\n          createdAt: new Date().toISOString()\n        };\n        users.push(newUser);\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n        resolve({\n          message: 'Usuário criado com sucesso'\n        });\n      } catch (error) {\n        reject(new Error('Erro ao criar usuário'));\n      }\n    }, 500);\n  });\n};\nexport const updateUserProfile = async (userId, updateData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        const userIndex = users.findIndex(u => u.id === userId);\n        if (userIndex === -1) {\n          reject(new Error('Usuário não encontrado'));\n          return;\n        }\n\n        // Update user data\n        users[userIndex] = {\n          ...users[userIndex],\n          ...updateData,\n          updatedAt: new Date().toISOString()\n        };\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n\n        // Update current user if it's the same user\n        const currentUser = getCurrentUser();\n        if (currentUser && currentUser.id === userId) {\n          const updatedUser = {\n            ...currentUser,\n            ...updateData\n          };\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\n        }\n        resolve({\n          message: 'Perfil atualizado com sucesso'\n        });\n      } catch (error) {\n        reject(new Error('Erro ao atualizar perfil'));\n      }\n    }, 500);\n  });\n};\n\n// Session management\nexport const refreshSession = () => {\n  const user = getCurrentUser();\n  if (user) {\n    const token = generateToken(user);\n    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n    return true;\n  }\n  return false;\n};\nexport const getSessionTimeRemaining = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return 0;\n  const tokenData = decodeToken(token);\n  if (!tokenData) return 0;\n  const remaining = tokenData.exp - Date.now();\n  return Math.max(0, remaining);\n};\n\n// Initialize on import\ninitializeUsers();","map":{"version":3,"names":["CryptoJS","v4","uuidv4","config","JWT_SECRET","auth","jwtSecret","SESSION_TIMEOUT","sessionTimeout","generateToken","userData","payload","exp","Date","now","iat","btoa","JSON","stringify","decodeToken","token","parse","atob","error","DEFAULT_USERS","id","username","email","password","role","STORAGE_KEYS","TOKEN","USER","USERS","initializeUsers","existingUsers","localStorage","getItem","setItem","login","Promise","resolve","reject","setTimeout","users","user","find","u","Error","logout","removeItem","getCurrentUser","userStr","tokenData","getToken","isAuthenticated","hasRole","requiredRole","roleHierarchy","userLevel","requiredLevel","registerUser","existingUser","newUser","createdAt","toISOString","push","message","updateUserProfile","userId","updateData","userIndex","findIndex","updatedAt","currentUser","updatedUser","refreshSession","getSessionTimeRemaining","remaining","Math","max"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/services/authService.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { v4 as uuidv4 } from 'uuid';\nimport config from '../config/env';\n\n// Local Authentication Service\nconst JWT_SECRET = config.auth.jwtSecret;\nconst SESSION_TIMEOUT = config.auth.sessionTimeout;\n\n// Simple JWT-like token generation (for demo purposes)\nconst generateToken = (userData) => {\n  const payload = {\n    ...userData,\n    exp: Date.now() + SESSION_TIMEOUT,\n    iat: Date.now()\n  };\n  \n  // In a real app, you'd use a proper JWT library\n  return btoa(JSON.stringify(payload));\n};\n\nconst decodeToken = (token) => {\n  try {\n    return JSON.parse(atob(token));\n  } catch (error) {\n    return null;\n  }\n};\n\n// Default users (in a real app, this would be handled by a proper auth service)\nconst DEFAULT_USERS = [\n  {\n    id: 1,\n    username: 'admin',\n    email: 'admin@transkipta.com',\n    password: 'admin123', // In production, this would be hashed\n    role: 'admin'\n  },\n  {\n    id: 2,\n    username: 'user',\n    email: 'user@transkipta.com',\n    password: 'user123',\n    role: 'user'\n  }\n];\n\n// Storage keys\nconst STORAGE_KEYS = {\n  TOKEN: 'transkipta_token',\n  USER: 'transkipta_user',\n  USERS: 'transkipta_users'\n};\n\n// Initialize default users if not exists\nconst initializeUsers = () => {\n  const existingUsers = localStorage.getItem(STORAGE_KEYS.USERS);\n  if (!existingUsers) {\n    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(DEFAULT_USERS));\n  }\n};\n\n// Authentication functions\nexport const login = async (username, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        \n        const user = users.find(u => \n          (u.username === username || u.email === username) && u.password === password\n        );\n        \n        if (user) {\n          const token = generateToken({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          });\n          \n          const userData = {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          };\n          \n          localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\n          \n          resolve({ token, user: userData });\n        } else {\n          reject(new Error('Credenciais inválidas'));\n        }\n      } catch (error) {\n        reject(new Error('Erro interno de autenticação'));\n      }\n    }, 500); // Simulate network delay\n  });\n};\n\nexport const logout = () => {\n  localStorage.removeItem(STORAGE_KEYS.TOKEN);\n  localStorage.removeItem(STORAGE_KEYS.USER);\n};\n\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userStr = localStorage.getItem(STORAGE_KEYS.USER);\n    \n    if (!token || !userStr) {\n      return null;\n    }\n    \n    const tokenData = decodeToken(token);\n    if (!tokenData || tokenData.exp < Date.now()) {\n      // Token expired\n      logout();\n      return null;\n    }\n    \n    return JSON.parse(userStr);\n  } catch (error) {\n    logout();\n    return null;\n  }\n};\n\nexport const getToken = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return null;\n  \n  const tokenData = decodeToken(token);\n  if (!tokenData || tokenData.exp < Date.now()) {\n    logout();\n    return null;\n  }\n  \n  return token;\n};\n\nexport const isAuthenticated = () => {\n  return getCurrentUser() !== null;\n};\n\nexport const hasRole = (requiredRole) => {\n  const user = getCurrentUser();\n  if (!user) return false;\n  \n  const roleHierarchy = {\n    'user': 1,\n    'admin': 2\n  };\n  \n  const userLevel = roleHierarchy[user.role] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n  \n  return userLevel >= requiredLevel;\n};\n\n// User management functions\nexport const registerUser = async (userData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        \n        // Check if user already exists\n        const existingUser = users.find(u => \n          u.username === userData.username || u.email === userData.email\n        );\n        \n        if (existingUser) {\n          reject(new Error('Usuário já existe'));\n          return;\n        }\n        \n        const newUser = {\n          id: Date.now(),\n          username: userData.username,\n          email: userData.email,\n          password: userData.password, // In production, hash this\n          role: userData.role || 'user',\n          createdAt: new Date().toISOString()\n        };\n        \n        users.push(newUser);\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n        \n        resolve({ message: 'Usuário criado com sucesso' });\n      } catch (error) {\n        reject(new Error('Erro ao criar usuário'));\n      }\n    }, 500);\n  });\n};\n\nexport const updateUserProfile = async (userId, updateData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        const userIndex = users.findIndex(u => u.id === userId);\n        \n        if (userIndex === -1) {\n          reject(new Error('Usuário não encontrado'));\n          return;\n        }\n        \n        // Update user data\n        users[userIndex] = {\n          ...users[userIndex],\n          ...updateData,\n          updatedAt: new Date().toISOString()\n        };\n        \n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n        \n        // Update current user if it's the same user\n        const currentUser = getCurrentUser();\n        if (currentUser && currentUser.id === userId) {\n          const updatedUser = { ...currentUser, ...updateData };\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\n        }\n        \n        resolve({ message: 'Perfil atualizado com sucesso' });\n      } catch (error) {\n        reject(new Error('Erro ao atualizar perfil'));\n      }\n    }, 500);\n  });\n};\n\n// Session management\nexport const refreshSession = () => {\n  const user = getCurrentUser();\n  if (user) {\n    const token = generateToken(user);\n    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n    return true;\n  }\n  return false;\n};\n\nexport const getSessionTimeRemaining = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return 0;\n  \n  const tokenData = decodeToken(token);\n  if (!tokenData) return 0;\n  \n  const remaining = tokenData.exp - Date.now();\n  return Math.max(0, remaining);\n};\n\n// Initialize on import\ninitializeUsers();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}