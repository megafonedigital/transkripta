{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/env';\n\n// Configurações das APIs\nconst OPENAI_API_KEY = config.openai.apiKey;\nconst OPENAI_API_URL = config.openai.baseUrl;\nconst WEBHOOK_URL = config.webhook.url;\nconst WEBHOOK_SECRET = config.webhook.secret;\nconst WEBHOOK_TIMEOUT = config.webhook.timeout;\nconst API_TIMEOUT = config.api.timeout;\n\n// Create axios instances\nconst openaiApi = axios.create({\n  baseURL: OPENAI_API_URL,\n  timeout: API_TIMEOUT,\n  headers: {\n    'Authorization': `Bearer ${OPENAI_API_KEY}`,\n    'Content-Type': 'application/json'\n  }\n});\n\n// Webhook API instance\nconst webhookApi = axios.create({\n  timeout: WEBHOOK_TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Webhook-Secret': WEBHOOK_SECRET\n  }\n});\n\n// Video Processing Functions via Webhook\nexport const processVideoUrl = async (url, options = {}) => {\n  try {\n    console.log('Enviando URL para webhook:', url);\n    const requestData = {\n      url: url,\n      format: options.format || 'mp4',\n      quality: options.quality || '720p',\n      audioOnly: options.audioOnly || false,\n      timestamp: Date.now()\n    };\n    console.log('Dados da requisição webhook:', requestData);\n    const response = await webhookApi.post(WEBHOOK_URL, requestData);\n    console.log('Resposta do webhook:', response.data);\n\n    // Nova estrutura de resposta: array com objetos contendo status, url e filename\n    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n      const videoData = response.data[0]; // Pega o primeiro item do array\n\n      if (videoData.status === 'tunnel' && videoData.url && videoData.filename) {\n        return {\n          status: videoData.status,\n          videoUrl: videoData.url,\n          audioUrl: videoData.url,\n          // Mesmo URL para áudio e vídeo no tunnel\n          title: videoData.filename.replace(/\\.[^/.]+$/, ''),\n          // Remove extensão do filename\n          filename: videoData.filename,\n          tunnelUrl: videoData.url\n        };\n      }\n    }\n\n    // Fallback para estrutura antiga se necessário\n    if (response.data && response.data.success) {\n      return {\n        videoUrl: response.data.videoUrl,\n        audioUrl: response.data.audioUrl,\n        title: response.data.title,\n        duration: response.data.duration,\n        thumbnail: response.data.thumbnail\n      };\n    }\n    throw new Error('Webhook não retornou dados válidos');\n  } catch (error) {\n    console.error('Erro no processamento via webhook:', error);\n    throw handleApiError(error);\n  }\n};\n\n// Download file from URL\nexport const downloadFromUrl = async (url, filename) => {\n  try {\n    console.log('Fazendo download do arquivo:', url);\n    const response = await axios.get(url, {\n      responseType: 'blob',\n      timeout: API_TIMEOUT * 3,\n      // Mais tempo para download de arquivos grandes\n      onDownloadProgress: progressEvent => {\n        if (progressEvent.total) {\n          const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(`Download progress: ${progress}%`);\n        }\n      }\n    });\n\n    // Create download link\n    const blob = new Blob([response.data]);\n    const downloadUrl = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = filename || 'download';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(downloadUrl);\n    return response.data;\n  } catch (error) {\n    console.error('Erro no download do arquivo:', error);\n    throw handleApiError(error);\n  }\n};\n\n// Process tunnel URL for transcription\nexport const processTunnelUrl = async tunnelUrl => {\n  try {\n    console.log('Processando URL do tunnel para transcrição:', tunnelUrl);\n    const response = await axios.get(tunnelUrl, {\n      responseType: 'blob',\n      timeout: API_TIMEOUT * 5,\n      // Mais tempo para arquivos grandes\n      onDownloadProgress: progressEvent => {\n        if (progressEvent.total) {\n          const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(`Download progress: ${progress}%`);\n        }\n      }\n    });\n\n    // Return blob for transcription\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao processar URL do tunnel:', error);\n    throw handleApiError(error);\n  }\n};\n\n// Get direct download link for social download\nexport const getTunnelDownloadInfo = videoData => {\n  if (videoData.status === 'tunnel' && videoData.tunnelUrl) {\n    return {\n      downloadUrl: videoData.tunnelUrl,\n      filename: videoData.filename,\n      title: videoData.title\n    };\n  }\n\n  // Fallback para estrutura antiga\n  return {\n    downloadUrl: videoData.videoUrl || videoData.audioUrl,\n    filename: videoData.title ? `${videoData.title}.mp4` : 'download.mp4',\n    title: videoData.title\n  };\n};\n\n// Webhook processing functions replace previous download methods\n\n// Transcription Functions\nexport const transcribeAudio = async (audioFile, options = {}) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', audioFile);\n    formData.append('model', options.model || 'whisper-1');\n    if (options.language) {\n      formData.append('language', options.language);\n    }\n    if (options.prompt) {\n      formData.append('prompt', options.prompt);\n    }\n    const response = await openaiApi.post('/audio/transcriptions', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return {\n      text: response.data.text,\n      language: response.data.language || options.language,\n      duration: response.data.duration\n    };\n  } catch (error) {\n    console.error('Erro na transcrição:', error);\n    throw new Error(`Falha na transcrição: ${error.message}`);\n  }\n};\n\n// Utility Functions\n\nexport const validateVideoUrl = url => {\n  const patterns = {\n    youtube: /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,\n    instagram: /(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,\n    tiktok: /(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/\n  };\n  for (const [platform, pattern] of Object.entries(patterns)) {\n    if (pattern.test(url)) {\n      return platform;\n    }\n  }\n  return null;\n};\n\n// File Processing\nexport const convertToAudio = async videoBlob => {\n  return new Promise((resolve, reject) => {\n    const audio = document.createElement('audio');\n    const url = URL.createObjectURL(videoBlob);\n    audio.src = url;\n    audio.addEventListener('loadedmetadata', () => {\n      // For now, we'll return the original blob\n      // In a real implementation, you might want to use FFmpeg.js\n      resolve(videoBlob);\n      URL.revokeObjectURL(url);\n    });\n    audio.addEventListener('error', () => {\n      reject(new Error('Erro ao processar o arquivo de áudio'));\n      URL.revokeObjectURL(url);\n    });\n  });\n};\n\n// Error Handling\nexport const handleApiError = error => {\n  if (error.response) {\n    var _error$response$data;\n    // Server responded with error status\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message;\n    switch (status) {\n      case 401:\n        return 'Chave de API inválida ou expirada';\n      case 403:\n        return 'Acesso negado. Verifique suas permissões';\n      case 429:\n        return 'Limite de requisições excedido. Tente novamente mais tarde';\n      case 500:\n        return 'Erro interno do servidor';\n      default:\n        return `Erro ${status}: ${message}`;\n    }\n  } else if (error.request) {\n    // Network error\n    return 'Erro de conexão. Verifique sua internet';\n  } else {\n    // Other error\n    return error.message || 'Erro desconhecido';\n  }\n};","map":{"version":3,"names":["axios","config","OPENAI_API_KEY","openai","apiKey","OPENAI_API_URL","baseUrl","WEBHOOK_URL","webhook","url","WEBHOOK_SECRET","secret","WEBHOOK_TIMEOUT","timeout","API_TIMEOUT","api","openaiApi","create","baseURL","headers","webhookApi","processVideoUrl","options","console","log","requestData","format","quality","audioOnly","timestamp","Date","now","response","post","data","Array","isArray","length","videoData","status","filename","videoUrl","audioUrl","title","replace","tunnelUrl","success","duration","thumbnail","Error","error","handleApiError","downloadFromUrl","get","responseType","onDownloadProgress","progressEvent","total","progress","Math","round","loaded","blob","Blob","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","processTunnelUrl","getTunnelDownloadInfo","transcribeAudio","audioFile","formData","FormData","append","model","language","prompt","text","message","validateVideoUrl","patterns","youtube","instagram","tiktok","platform","pattern","Object","entries","test","convertToAudio","videoBlob","Promise","resolve","reject","audio","src","addEventListener","_error$response$data","request"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport config from '../config/env';\r\n\r\n// Configurações das APIs\r\nconst OPENAI_API_KEY = config.openai.apiKey;\r\nconst OPENAI_API_URL = config.openai.baseUrl;\r\nconst WEBHOOK_URL = config.webhook.url;\r\nconst WEBHOOK_SECRET = config.webhook.secret;\r\nconst WEBHOOK_TIMEOUT = config.webhook.timeout;\r\nconst API_TIMEOUT = config.api.timeout;\r\n\r\n// Create axios instances\r\nconst openaiApi = axios.create({\r\n  baseURL: OPENAI_API_URL,\r\n  timeout: API_TIMEOUT,\r\n  headers: {\r\n    'Authorization': `Bearer ${OPENAI_API_KEY}`,\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Webhook API instance\r\nconst webhookApi = axios.create({\r\n  timeout: WEBHOOK_TIMEOUT,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'X-Webhook-Secret': WEBHOOK_SECRET\r\n  }\r\n});\r\n\r\n// Video Processing Functions via Webhook\r\nexport const processVideoUrl = async (url, options = {}) => {\r\n  try {\r\n    console.log('Enviando URL para webhook:', url);\r\n    \r\n    const requestData = {\r\n      url: url,\r\n      format: options.format || 'mp4',\r\n      quality: options.quality || '720p',\r\n      audioOnly: options.audioOnly || false,\r\n      timestamp: Date.now()\r\n    };\r\n    \r\n    console.log('Dados da requisição webhook:', requestData);\r\n    \r\n    const response = await webhookApi.post(WEBHOOK_URL, requestData);\r\n    \r\n    console.log('Resposta do webhook:', response.data);\r\n    \r\n    // Nova estrutura de resposta: array com objetos contendo status, url e filename\r\n    if (response.data && Array.isArray(response.data) && response.data.length > 0) {\r\n      const videoData = response.data[0]; // Pega o primeiro item do array\r\n      \r\n      if (videoData.status === 'tunnel' && videoData.url && videoData.filename) {\r\n        return {\r\n          status: videoData.status,\r\n          videoUrl: videoData.url,\r\n          audioUrl: videoData.url, // Mesmo URL para áudio e vídeo no tunnel\r\n          title: videoData.filename.replace(/\\.[^/.]+$/, ''), // Remove extensão do filename\r\n          filename: videoData.filename,\r\n          tunnelUrl: videoData.url\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Fallback para estrutura antiga se necessário\r\n    if (response.data && response.data.success) {\r\n      return {\r\n        videoUrl: response.data.videoUrl,\r\n        audioUrl: response.data.audioUrl,\r\n        title: response.data.title,\r\n        duration: response.data.duration,\r\n        thumbnail: response.data.thumbnail\r\n      };\r\n    }\r\n    \r\n    throw new Error('Webhook não retornou dados válidos');\r\n  } catch (error) {\r\n    console.error('Erro no processamento via webhook:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Download file from URL\r\nexport const downloadFromUrl = async (url, filename) => {\r\n  try {\r\n    console.log('Fazendo download do arquivo:', url);\r\n    \r\n    const response = await axios.get(url, {\r\n      responseType: 'blob',\r\n      timeout: API_TIMEOUT * 3, // Mais tempo para download de arquivos grandes\r\n      onDownloadProgress: (progressEvent) => {\r\n        if (progressEvent.total) {\r\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          console.log(`Download progress: ${progress}%`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Create download link\r\n    const blob = new Blob([response.data]);\r\n    const downloadUrl = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.download = filename || 'download';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(downloadUrl);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro no download do arquivo:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Process tunnel URL for transcription\r\nexport const processTunnelUrl = async (tunnelUrl) => {\r\n  try {\r\n    console.log('Processando URL do tunnel para transcrição:', tunnelUrl);\r\n    \r\n    const response = await axios.get(tunnelUrl, {\r\n      responseType: 'blob',\r\n      timeout: API_TIMEOUT * 5, // Mais tempo para arquivos grandes\r\n      onDownloadProgress: (progressEvent) => {\r\n        if (progressEvent.total) {\r\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          console.log(`Download progress: ${progress}%`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Return blob for transcription\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao processar URL do tunnel:', error);\r\n    throw handleApiError(error);\r\n  }\r\n};\r\n\r\n// Get direct download link for social download\r\nexport const getTunnelDownloadInfo = (videoData) => {\r\n  if (videoData.status === 'tunnel' && videoData.tunnelUrl) {\r\n    return {\r\n      downloadUrl: videoData.tunnelUrl,\r\n      filename: videoData.filename,\r\n      title: videoData.title\r\n    };\r\n  }\r\n  \r\n  // Fallback para estrutura antiga\r\n  return {\r\n    downloadUrl: videoData.videoUrl || videoData.audioUrl,\r\n    filename: videoData.title ? `${videoData.title}.mp4` : 'download.mp4',\r\n    title: videoData.title\r\n  };\r\n};\r\n\r\n// Webhook processing functions replace previous download methods\r\n\r\n// Transcription Functions\r\nexport const transcribeAudio = async (audioFile, options = {}) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', audioFile);\r\n    formData.append('model', options.model || 'whisper-1');\r\n    \r\n    if (options.language) {\r\n      formData.append('language', options.language);\r\n    }\r\n    \r\n    if (options.prompt) {\r\n      formData.append('prompt', options.prompt);\r\n    }\r\n    \r\n    const response = await openaiApi.post('/audio/transcriptions', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return {\r\n      text: response.data.text,\r\n      language: response.data.language || options.language,\r\n      duration: response.data.duration\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro na transcrição:', error);\r\n    throw new Error(`Falha na transcrição: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Utility Functions\r\n\r\nexport const validateVideoUrl = (url) => {\r\n  const patterns = {\r\n    youtube: /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,\r\n    instagram: /(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,\r\n    tiktok: /(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/\r\n  };\r\n  \r\n  for (const [platform, pattern] of Object.entries(patterns)) {\r\n    if (pattern.test(url)) {\r\n      return platform;\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// File Processing\r\nexport const convertToAudio = async (videoBlob) => {\r\n  return new Promise((resolve, reject) => {\r\n    const audio = document.createElement('audio');\r\n    const url = URL.createObjectURL(videoBlob);\r\n    \r\n    audio.src = url;\r\n    audio.addEventListener('loadedmetadata', () => {\r\n      // For now, we'll return the original blob\r\n      // In a real implementation, you might want to use FFmpeg.js\r\n      resolve(videoBlob);\r\n      URL.revokeObjectURL(url);\r\n    });\r\n    \r\n    audio.addEventListener('error', () => {\r\n      reject(new Error('Erro ao processar o arquivo de áudio'));\r\n      URL.revokeObjectURL(url);\r\n    });\r\n  });\r\n};\r\n\r\n// Error Handling\r\nexport const handleApiError = (error) => {\r\n  if (error.response) {\r\n    // Server responded with error status\r\n    const status = error.response.status;\r\n    const message = error.response.data?.message || error.message;\r\n    \r\n    switch (status) {\r\n      case 401:\r\n        return 'Chave de API inválida ou expirada';\r\n      case 403:\r\n        return 'Acesso negado. Verifique suas permissões';\r\n      case 429:\r\n        return 'Limite de requisições excedido. Tente novamente mais tarde';\r\n      case 500:\r\n        return 'Erro interno do servidor';\r\n      default:\r\n        return `Erro ${status}: ${message}`;\r\n    }\r\n  } else if (error.request) {\r\n    // Network error\r\n    return 'Erro de conexão. Verifique sua internet';\r\n  } else {\r\n    // Other error\r\n    return error.message || 'Erro desconhecido';\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}