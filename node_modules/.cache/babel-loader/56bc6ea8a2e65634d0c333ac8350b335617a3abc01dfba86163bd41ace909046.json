{"ast":null,"code":"import axios from'axios';import config from'../config/env';// Configurações das APIs\nconst OPENAI_API_KEY=config.openai.apiKey;const OPENAI_API_URL=config.openai.baseUrl;const RAPIDAPI_KEY=config.rapidapi.key;const RAPIDAPI_HOST=config.rapidapi.host;const COBALT_API_URL=config.cobalt.apiUrl;const API_TIMEOUT=config.api.timeout;// Create axios instances\nconst openaiApi=axios.create({baseURL:OPENAI_API_URL,timeout:API_TIMEOUT,headers:{'Authorization':`Bearer ${OPENAI_API_KEY}`,'Content-Type':'application/json'}});const rapidApi=axios.create({timeout:API_TIMEOUT,headers:{'X-RapidAPI-Key':RAPIDAPI_KEY,'X-RapidAPI-Host':RAPIDAPI_HOST}});const cobaltApi=axios.create({baseURL:COBALT_API_URL,timeout:API_TIMEOUT,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Video Download Functions\nexport const downloadVideo=async(url,platform)=>{try{let downloadUrl;// Priorizar Cobalt como serviço principal\ntry{console.log('Tentando download via Cobalt...');downloadUrl=await downloadFromCobalt(url);}catch(cobaltError){console.warn('Falha no Cobalt, tentando alternativas:',cobaltError.message);// Fallback para RapidAPI apenas para YouTube\nif(platform==='youtube'){try{console.log('Tentando download via RapidAPI...');downloadUrl=await downloadFromYoutube(url);}catch(rapidError){console.error('Falha no RapidAPI:',rapidError.message);throw new Error('Todos os serviços de download falharam');}}else{throw cobaltError;}}if(!downloadUrl){throw new Error('Não foi possível obter URL de download');}console.log('URL de download obtida:',downloadUrl);// Download the actual file\nconst response=await axios.get(downloadUrl,{responseType:'blob',timeout:API_TIMEOUT*2,// Mais tempo para download de arquivos grandes\nonDownloadProgress:progressEvent=>{if(progressEvent.total){const progress=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(`Download progress: ${progress}%`);}}});return response.data;}catch(error){console.error('Erro no download do vídeo:',error);throw handleApiError(error);}};const downloadFromYoutube=async url=>{try{const response=await rapidApi.get('/dl',{params:{id:extractVideoId(url)}});if(response.data&&response.data.link){return response.data.link;}throw new Error('URL de download não encontrada');}catch(error){throw new Error(`Erro no download do YouTube: ${error.message}`);}};const downloadFromCobalt=async url=>{try{console.log('Iniciando download via Cobalt para URL:',url);const requestData={url:url,vCodec:'h264',vQuality:'720',aFormat:'mp3',isAudioOnly:false,isAudioMuted:false,dubLang:false,filenamePattern:'classic'};console.log('Dados da requisição Cobalt:',requestData);const response=await cobaltApi.post('/api/json',requestData);console.log('Resposta do Cobalt:',response.data);if(response.data){// Cobalt pode retornar diferentes formatos de resposta\nif(response.data.url){return response.data.url;}else if(response.data.picker&&response.data.picker.length>0){// Se houver múltiplas opções, pegar a primeira\nreturn response.data.picker[0].url;}else if(response.data.audio){// Se for apenas áudio\nreturn response.data.audio;}}throw new Error('URL de download não encontrada na resposta do Cobalt');}catch(error){var _error$response,_error$response2,_error$response3,_error$response4;console.error('Erro detalhado no Cobalt:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===400){throw new Error('URL inválida ou não suportada pelo Cobalt');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===429){throw new Error('Limite de requisições excedido no Cobalt');}else if(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)>=500){throw new Error('Erro interno do servidor Cobalt');}throw new Error(`Erro no download via Cobalt: ${error.message}`);}};// Transcription Functions\nexport const transcribeAudio=async function(audioFile){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const formData=new FormData();formData.append('file',audioFile);formData.append('model',options.model||'whisper-1');if(options.language){formData.append('language',options.language);}if(options.prompt){formData.append('prompt',options.prompt);}const response=await openaiApi.post('/audio/transcriptions',formData,{headers:{'Content-Type':'multipart/form-data'}});return{text:response.data.text,language:response.data.language||options.language,duration:response.data.duration};}catch(error){console.error('Erro na transcrição:',error);throw new Error(`Falha na transcrição: ${error.message}`);}};// Utility Functions\nconst extractVideoId=url=>{const regex=/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;const match=url.match(regex);return match?match[1]:null;};export const validateVideoUrl=url=>{const patterns={youtube:/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,instagram:/(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,tiktok:/(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/};for(const[platform,pattern]of Object.entries(patterns)){if(pattern.test(url)){return platform;}}return null;};// File Processing\nexport const convertToAudio=async videoBlob=>{return new Promise((resolve,reject)=>{const audio=document.createElement('audio');const url=URL.createObjectURL(videoBlob);audio.src=url;audio.addEventListener('loadedmetadata',()=>{// For now, we'll return the original blob\n// In a real implementation, you might want to use FFmpeg.js\nresolve(videoBlob);URL.revokeObjectURL(url);});audio.addEventListener('error',()=>{reject(new Error('Erro ao processar o arquivo de áudio'));URL.revokeObjectURL(url);});});};// Error Handling\nexport const handleApiError=error=>{if(error.response){var _error$response$data;// Server responded with error status\nconst status=error.response.status;const message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message;switch(status){case 401:return'Chave de API inválida ou expirada';case 403:return'Acesso negado. Verifique suas permissões';case 429:return'Limite de requisições excedido. Tente novamente mais tarde';case 500:return'Erro interno do servidor';default:return`Erro ${status}: ${message}`;}}else if(error.request){// Network error\nreturn'Erro de conexão. Verifique sua internet';}else{// Other error\nreturn error.message||'Erro desconhecido';}};","map":{"version":3,"names":["axios","config","OPENAI_API_KEY","openai","apiKey","OPENAI_API_URL","baseUrl","RAPIDAPI_KEY","rapidapi","key","RAPIDAPI_HOST","host","COBALT_API_URL","cobalt","apiUrl","API_TIMEOUT","api","timeout","openaiApi","create","baseURL","headers","rapidApi","cobaltApi","downloadVideo","url","platform","downloadUrl","console","log","downloadFromCobalt","cobaltError","warn","message","downloadFromYoutube","rapidError","error","Error","response","get","responseType","onDownloadProgress","progressEvent","total","progress","Math","round","loaded","data","handleApiError","params","id","extractVideoId","link","requestData","vCodec","vQuality","aFormat","isAudioOnly","isAudioMuted","dubLang","filenamePattern","post","picker","length","audio","_error$response","_error$response2","_error$response3","_error$response4","status","transcribeAudio","audioFile","options","arguments","undefined","formData","FormData","append","model","language","prompt","text","duration","regex","match","validateVideoUrl","patterns","youtube","instagram","tiktok","pattern","Object","entries","test","convertToAudio","videoBlob","Promise","resolve","reject","document","createElement","URL","createObjectURL","src","addEventListener","revokeObjectURL","_error$response$data","request"],"sources":["C:/Users/Afonso/Desktop/Transkipta/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\nimport config from '../config/env';\n\n// Configurações das APIs\nconst OPENAI_API_KEY = config.openai.apiKey;\nconst OPENAI_API_URL = config.openai.baseUrl;\nconst RAPIDAPI_KEY = config.rapidapi.key;\nconst RAPIDAPI_HOST = config.rapidapi.host;\nconst COBALT_API_URL = config.cobalt.apiUrl;\nconst API_TIMEOUT = config.api.timeout;\n\n// Create axios instances\nconst openaiApi = axios.create({\n  baseURL: OPENAI_API_URL,\n  timeout: API_TIMEOUT,\n  headers: {\n    'Authorization': `Bearer ${OPENAI_API_KEY}`,\n    'Content-Type': 'application/json'\n  }\n});\n\nconst rapidApi = axios.create({\n  timeout: API_TIMEOUT,\n  headers: {\n    'X-RapidAPI-Key': RAPIDAPI_KEY,\n    'X-RapidAPI-Host': RAPIDAPI_HOST\n  }\n});\n\nconst cobaltApi = axios.create({\n  baseURL: COBALT_API_URL,\n  timeout: API_TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Video Download Functions\nexport const downloadVideo = async (url, platform) => {\n  try {\n    let downloadUrl;\n    \n    // Priorizar Cobalt como serviço principal\n    try {\n      console.log('Tentando download via Cobalt...');\n      downloadUrl = await downloadFromCobalt(url);\n    } catch (cobaltError) {\n      console.warn('Falha no Cobalt, tentando alternativas:', cobaltError.message);\n      \n      // Fallback para RapidAPI apenas para YouTube\n      if (platform === 'youtube') {\n        try {\n          console.log('Tentando download via RapidAPI...');\n          downloadUrl = await downloadFromYoutube(url);\n        } catch (rapidError) {\n          console.error('Falha no RapidAPI:', rapidError.message);\n          throw new Error('Todos os serviços de download falharam');\n        }\n      } else {\n        throw cobaltError;\n      }\n    }\n    \n    if (!downloadUrl) {\n      throw new Error('Não foi possível obter URL de download');\n    }\n    \n    console.log('URL de download obtida:', downloadUrl);\n    \n    // Download the actual file\n    const response = await axios.get(downloadUrl, {\n      responseType: 'blob',\n      timeout: API_TIMEOUT * 2, // Mais tempo para download de arquivos grandes\n      onDownloadProgress: (progressEvent) => {\n        if (progressEvent.total) {\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          console.log(`Download progress: ${progress}%`);\n        }\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Erro no download do vídeo:', error);\n    throw handleApiError(error);\n  }\n};\n\nconst downloadFromYoutube = async (url) => {\n  try {\n    const response = await rapidApi.get('/dl', {\n      params: {\n        id: extractVideoId(url)\n      }\n    });\n    \n    if (response.data && response.data.link) {\n      return response.data.link;\n    }\n    throw new Error('URL de download não encontrada');\n  } catch (error) {\n    throw new Error(`Erro no download do YouTube: ${error.message}`);\n  }\n};\n\nconst downloadFromCobalt = async (url) => {\n  try {\n    console.log('Iniciando download via Cobalt para URL:', url);\n    \n    const requestData = {\n      url: url,\n      vCodec: 'h264',\n      vQuality: '720',\n      aFormat: 'mp3',\n      isAudioOnly: false,\n      isAudioMuted: false,\n      dubLang: false,\n      filenamePattern: 'classic'\n    };\n    \n    console.log('Dados da requisição Cobalt:', requestData);\n    \n    const response = await cobaltApi.post('/api/json', requestData);\n    \n    console.log('Resposta do Cobalt:', response.data);\n    \n    if (response.data) {\n      // Cobalt pode retornar diferentes formatos de resposta\n      if (response.data.url) {\n        return response.data.url;\n      } else if (response.data.picker && response.data.picker.length > 0) {\n        // Se houver múltiplas opções, pegar a primeira\n        return response.data.picker[0].url;\n      } else if (response.data.audio) {\n        // Se for apenas áudio\n        return response.data.audio;\n      }\n    }\n    \n    throw new Error('URL de download não encontrada na resposta do Cobalt');\n  } catch (error) {\n    console.error('Erro detalhado no Cobalt:', error.response?.data || error.message);\n    \n    if (error.response?.status === 400) {\n      throw new Error('URL inválida ou não suportada pelo Cobalt');\n    } else if (error.response?.status === 429) {\n      throw new Error('Limite de requisições excedido no Cobalt');\n    } else if (error.response?.status >= 500) {\n      throw new Error('Erro interno do servidor Cobalt');\n    }\n    \n    throw new Error(`Erro no download via Cobalt: ${error.message}`);\n   }\n };\n\n// Transcription Functions\nexport const transcribeAudio = async (audioFile, options = {}) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', audioFile);\n    formData.append('model', options.model || 'whisper-1');\n    \n    if (options.language) {\n      formData.append('language', options.language);\n    }\n    \n    if (options.prompt) {\n      formData.append('prompt', options.prompt);\n    }\n    \n    const response = await openaiApi.post('/audio/transcriptions', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    \n    return {\n      text: response.data.text,\n      language: response.data.language || options.language,\n      duration: response.data.duration\n    };\n  } catch (error) {\n    console.error('Erro na transcrição:', error);\n    throw new Error(`Falha na transcrição: ${error.message}`);\n  }\n};\n\n// Utility Functions\nconst extractVideoId = (url) => {\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n  const match = url.match(regex);\n  return match ? match[1] : null;\n};\n\nexport const validateVideoUrl = (url) => {\n  const patterns = {\n    youtube: /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)/,\n    instagram: /(?:instagram\\.com\\/(?:p|reel|tv)\\/)/,\n    tiktok: /(?:tiktok\\.com\\/@[^\\/]+\\/video\\/|vm\\.tiktok\\.com\\/)/\n  };\n  \n  for (const [platform, pattern] of Object.entries(patterns)) {\n    if (pattern.test(url)) {\n      return platform;\n    }\n  }\n  \n  return null;\n};\n\n// File Processing\nexport const convertToAudio = async (videoBlob) => {\n  return new Promise((resolve, reject) => {\n    const audio = document.createElement('audio');\n    const url = URL.createObjectURL(videoBlob);\n    \n    audio.src = url;\n    audio.addEventListener('loadedmetadata', () => {\n      // For now, we'll return the original blob\n      // In a real implementation, you might want to use FFmpeg.js\n      resolve(videoBlob);\n      URL.revokeObjectURL(url);\n    });\n    \n    audio.addEventListener('error', () => {\n      reject(new Error('Erro ao processar o arquivo de áudio'));\n      URL.revokeObjectURL(url);\n    });\n  });\n};\n\n// Error Handling\nexport const handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error status\n    const status = error.response.status;\n    const message = error.response.data?.message || error.message;\n    \n    switch (status) {\n      case 401:\n        return 'Chave de API inválida ou expirada';\n      case 403:\n        return 'Acesso negado. Verifique suas permissões';\n      case 429:\n        return 'Limite de requisições excedido. Tente novamente mais tarde';\n      case 500:\n        return 'Erro interno do servidor';\n      default:\n        return `Erro ${status}: ${message}`;\n    }\n  } else if (error.request) {\n    // Network error\n    return 'Erro de conexão. Verifique sua internet';\n  } else {\n    // Other error\n    return error.message || 'Erro desconhecido';\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}