{"ast":null,"code":"import config from'../config/env';// Local Authentication Service\nconst JWT_SECRET=config.auth.jwtSecret;const SESSION_TIMEOUT=config.auth.sessionTimeout;// Simple JWT-like token generation (for demo purposes)\nconst generateToken=userData=>{const payload={...userData,exp:Date.now()+SESSION_TIMEOUT,iat:Date.now()};// In a real app, you'd use a proper JWT library\nreturn btoa(JSON.stringify(payload));};const decodeToken=token=>{try{return JSON.parse(atob(token));}catch(error){return null;}};// Default users (in a real app, this would be handled by a proper auth service)\nconst getDefaultUsers=()=>{// Verificar se as credenciais do administrador estão definidas nas variáveis de ambiente\nconst adminUsername=config.auth.adminUsername;const adminEmail=config.auth.adminEmail;const adminPassword=config.auth.adminPassword;if(!adminUsername||!adminEmail||!adminPassword){throw new Error('Credenciais de administrador não configuradas nas variáveis de ambiente. Configure as variáveis REACT_APP_ADMIN_USERNAME, REACT_APP_ADMIN_EMAIL e REACT_APP_ADMIN_PASSWORD no seu arquivo .env');}return[{id:1,username:adminUsername,email:adminEmail,password:adminPassword,// In production, this would be hashed\nrole:'admin'}];};// Storage keys\nconst STORAGE_KEYS={TOKEN:'transkipta_token',USER:'transkipta_user',USERS:'transkipta_users'};// Initialize default users if not exists\nconst initializeUsers=()=>{const existingUsers=localStorage.getItem(STORAGE_KEYS.USERS);if(!existingUsers){const defaultUsers=getDefaultUsers();localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(defaultUsers));}};// Authentication functions\nexport const login=async(username,password)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{initializeUsers();const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');// Also check default users from environment variables\nconst defaultUsers=getDefaultUsers();const allUsers=[...users,...defaultUsers];const user=allUsers.find(u=>(u.username===username||u.email===username)&&u.password===password);if(user){const token=generateToken({id:user.id,username:user.username,email:user.email,role:user.role});const userData={id:user.id,username:user.username,email:user.email,role:user.role};localStorage.setItem(STORAGE_KEYS.TOKEN,token);localStorage.setItem(STORAGE_KEYS.USER,JSON.stringify(userData));resolve({token,user:userData});}else{reject(new Error('Credenciais inválidas'));}}catch(error){reject(new Error('Erro interno de autenticação'));}},500);// Simulate network delay\n});};export const logout=()=>{localStorage.removeItem(STORAGE_KEYS.TOKEN);localStorage.removeItem(STORAGE_KEYS.USER);};export const getCurrentUser=()=>{try{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);const userStr=localStorage.getItem(STORAGE_KEYS.USER);if(!token||!userStr){return null;}const tokenData=decodeToken(token);if(!tokenData||tokenData.exp<Date.now()){// Token expired\nlogout();return null;}return JSON.parse(userStr);}catch(error){logout();return null;}};export const getToken=()=>{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);if(!token)return null;const tokenData=decodeToken(token);if(!tokenData||tokenData.exp<Date.now()){logout();return null;}return token;};export const isAuthenticated=()=>{return getCurrentUser()!==null;};export const hasRole=requiredRole=>{const user=getCurrentUser();if(!user)return false;const roleHierarchy={'user':1,'admin':2};const userLevel=roleHierarchy[user.role]||0;const requiredLevel=roleHierarchy[requiredRole]||0;return userLevel>=requiredLevel;};// User management functions\nexport const registerUser=async userData=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{initializeUsers();const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');// Check if user already exists\nconst existingUser=users.find(u=>u.username===userData.username||u.email===userData.email);if(existingUser){reject(new Error('Usuário já existe'));return;}const newUser={id:Date.now(),username:userData.username,email:userData.email,password:userData.password,// In production, hash this\nrole:userData.role||'user',createdAt:new Date().toISOString()};users.push(newUser);localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(users));resolve({message:'Usuário criado com sucesso'});}catch(error){reject(new Error('Erro ao criar usuário'));}},500);});};export const updateUserProfile=async(userId,updateData)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');const userIndex=users.findIndex(u=>u.id===userId);if(userIndex===-1){reject(new Error('Usuário não encontrado'));return;}// Update user data\nusers[userIndex]={...users[userIndex],...updateData,updatedAt:new Date().toISOString()};localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(users));// Update current user if it's the same user\nconst currentUser=getCurrentUser();if(currentUser&&currentUser.id===userId){const updatedUser={...currentUser,...updateData};localStorage.setItem(STORAGE_KEYS.USER,JSON.stringify(updatedUser));}resolve({message:'Perfil atualizado com sucesso'});}catch(error){reject(new Error('Erro ao atualizar perfil'));}},500);});};// Session management\nexport const refreshSession=()=>{const user=getCurrentUser();if(user){const token=generateToken(user);localStorage.setItem(STORAGE_KEYS.TOKEN,token);return true;}return false;};export const getSessionTimeRemaining=()=>{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);if(!token)return 0;const tokenData=decodeToken(token);if(!tokenData)return 0;const remaining=tokenData.exp-Date.now();return Math.max(0,remaining);};// Initialize on import\ninitializeUsers();","map":{"version":3,"names":["config","JWT_SECRET","auth","jwtSecret","SESSION_TIMEOUT","sessionTimeout","generateToken","userData","payload","exp","Date","now","iat","btoa","JSON","stringify","decodeToken","token","parse","atob","error","getDefaultUsers","adminUsername","adminEmail","adminPassword","Error","id","username","email","password","role","STORAGE_KEYS","TOKEN","USER","USERS","initializeUsers","existingUsers","localStorage","getItem","defaultUsers","setItem","login","Promise","resolve","reject","setTimeout","users","allUsers","user","find","u","logout","removeItem","getCurrentUser","userStr","tokenData","getToken","isAuthenticated","hasRole","requiredRole","roleHierarchy","userLevel","requiredLevel","registerUser","existingUser","newUser","createdAt","toISOString","push","message","updateUserProfile","userId","updateData","userIndex","findIndex","updatedAt","currentUser","updatedUser","refreshSession","getSessionTimeRemaining","remaining","Math","max"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/services/authService.js"],"sourcesContent":["import config from '../config/env';\r\n\r\n// Local Authentication Service\r\nconst JWT_SECRET = config.auth.jwtSecret;\r\nconst SESSION_TIMEOUT = config.auth.sessionTimeout;\r\n\r\n// Simple JWT-like token generation (for demo purposes)\r\nconst generateToken = (userData) => {\r\n  const payload = {\r\n    ...userData,\r\n    exp: Date.now() + SESSION_TIMEOUT,\r\n    iat: Date.now()\r\n  };\r\n  \r\n  // In a real app, you'd use a proper JWT library\r\n  return btoa(JSON.stringify(payload));\r\n};\r\n\r\nconst decodeToken = (token) => {\r\n  try {\r\n    return JSON.parse(atob(token));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Default users (in a real app, this would be handled by a proper auth service)\r\nconst getDefaultUsers = () => {\r\n  // Verificar se as credenciais do administrador estão definidas nas variáveis de ambiente\r\n  const adminUsername = config.auth.adminUsername;\r\n  const adminEmail = config.auth.adminEmail;\r\n  const adminPassword = config.auth.adminPassword;\r\n  \r\n  if (!adminUsername || !adminEmail || !adminPassword) {\r\n    throw new Error('Credenciais de administrador não configuradas nas variáveis de ambiente. Configure as variáveis REACT_APP_ADMIN_USERNAME, REACT_APP_ADMIN_EMAIL e REACT_APP_ADMIN_PASSWORD no seu arquivo .env');\r\n  }\r\n  \r\n  return [\r\n    {\r\n      id: 1,\r\n      username: adminUsername,\r\n      email: adminEmail,\r\n      password: adminPassword, // In production, this would be hashed\r\n      role: 'admin'\r\n    }\r\n  ];\r\n};\r\n\r\n// Storage keys\r\nconst STORAGE_KEYS = {\r\n  TOKEN: 'transkipta_token',\r\n  USER: 'transkipta_user',\r\n  USERS: 'transkipta_users'\r\n};\r\n\r\n// Initialize default users if not exists\r\nconst initializeUsers = () => {\r\n  const existingUsers = localStorage.getItem(STORAGE_KEYS.USERS);\r\n  if (!existingUsers) {\r\n    const defaultUsers = getDefaultUsers();\r\n    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(defaultUsers));\r\n  }\r\n};\r\n\r\n// Authentication functions\r\nexport const login = async (username, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      try {\r\n        initializeUsers();\r\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\r\n        \r\n        // Also check default users from environment variables\r\n        const defaultUsers = getDefaultUsers();\r\n        const allUsers = [...users, ...defaultUsers];\r\n        \r\n        const user = allUsers.find(u => \r\n          (u.username === username || u.email === username) && u.password === password\r\n        );\r\n        \r\n        if (user) {\r\n          const token = generateToken({\r\n            id: user.id,\r\n            username: user.username,\r\n            email: user.email,\r\n            role: user.role\r\n          });\r\n          \r\n          const userData = {\r\n            id: user.id,\r\n            username: user.username,\r\n            email: user.email,\r\n            role: user.role\r\n          };\r\n          \r\n          localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\r\n          \r\n          resolve({ token, user: userData });\r\n        } else {\r\n          reject(new Error('Credenciais inválidas'));\r\n        }\r\n      } catch (error) {\r\n        reject(new Error('Erro interno de autenticação'));\r\n      }\r\n    }, 500); // Simulate network delay\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(STORAGE_KEYS.TOKEN);\r\n  localStorage.removeItem(STORAGE_KEYS.USER);\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n    const userStr = localStorage.getItem(STORAGE_KEYS.USER);\r\n    \r\n    if (!token || !userStr) {\r\n      return null;\r\n    }\r\n    \r\n    const tokenData = decodeToken(token);\r\n    if (!tokenData || tokenData.exp < Date.now()) {\r\n      // Token expired\r\n      logout();\r\n      return null;\r\n    }\r\n    \r\n    return JSON.parse(userStr);\r\n  } catch (error) {\r\n    logout();\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getToken = () => {\r\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n  if (!token) return null;\r\n  \r\n  const tokenData = decodeToken(token);\r\n  if (!tokenData || tokenData.exp < Date.now()) {\r\n    logout();\r\n    return null;\r\n  }\r\n  \r\n  return token;\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  return getCurrentUser() !== null;\r\n};\r\n\r\nexport const hasRole = (requiredRole) => {\r\n  const user = getCurrentUser();\r\n  if (!user) return false;\r\n  \r\n  const roleHierarchy = {\r\n    'user': 1,\r\n    'admin': 2\r\n  };\r\n  \r\n  const userLevel = roleHierarchy[user.role] || 0;\r\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\r\n  \r\n  return userLevel >= requiredLevel;\r\n};\r\n\r\n// User management functions\r\nexport const registerUser = async (userData) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      try {\r\n        initializeUsers();\r\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\r\n        \r\n        // Check if user already exists\r\n        const existingUser = users.find(u => \r\n          u.username === userData.username || u.email === userData.email\r\n        );\r\n        \r\n        if (existingUser) {\r\n          reject(new Error('Usuário já existe'));\r\n          return;\r\n        }\r\n        \r\n        const newUser = {\r\n          id: Date.now(),\r\n          username: userData.username,\r\n          email: userData.email,\r\n          password: userData.password, // In production, hash this\r\n          role: userData.role || 'user',\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        \r\n        users.push(newUser);\r\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\r\n        \r\n        resolve({ message: 'Usuário criado com sucesso' });\r\n      } catch (error) {\r\n        reject(new Error('Erro ao criar usuário'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const updateUserProfile = async (userId, updateData) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      try {\r\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\r\n        const userIndex = users.findIndex(u => u.id === userId);\r\n        \r\n        if (userIndex === -1) {\r\n          reject(new Error('Usuário não encontrado'));\r\n          return;\r\n        }\r\n        \r\n        // Update user data\r\n        users[userIndex] = {\r\n          ...users[userIndex],\r\n          ...updateData,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        \r\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\r\n        \r\n        // Update current user if it's the same user\r\n        const currentUser = getCurrentUser();\r\n        if (currentUser && currentUser.id === userId) {\r\n          const updatedUser = { ...currentUser, ...updateData };\r\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\r\n        }\r\n        \r\n        resolve({ message: 'Perfil atualizado com sucesso' });\r\n      } catch (error) {\r\n        reject(new Error('Erro ao atualizar perfil'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\n// Session management\r\nexport const refreshSession = () => {\r\n  const user = getCurrentUser();\r\n  if (user) {\r\n    const token = generateToken(user);\r\n    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getSessionTimeRemaining = () => {\r\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n  if (!token) return 0;\r\n  \r\n  const tokenData = decodeToken(token);\r\n  if (!tokenData) return 0;\r\n  \r\n  const remaining = tokenData.exp - Date.now();\r\n  return Math.max(0, remaining);\r\n};\r\n\r\n// Initialize on import\r\ninitializeUsers();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}