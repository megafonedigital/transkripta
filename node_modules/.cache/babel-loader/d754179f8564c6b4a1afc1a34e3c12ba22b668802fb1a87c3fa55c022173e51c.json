{"ast":null,"code":"// Local Storage Service for Transcriptions, History, and Metrics\n// Storage keys\nconst STORAGE_KEYS={TRANSCRIPTIONS:'transkipta_transcriptions',HISTORY:'transkipta_history',METRICS:'transkipta_metrics',SETTINGS:'transkipta_settings',LOGS:'transkipta_logs'};// Utility functions\nconst generateId=()=>{return Date.now().toString(36)+Math.random().toString(36).substr(2);};const getCurrentTimestamp=()=>{return new Date().toISOString();};// Transcription Management\nexport const saveTranscription=transcriptionData=>{try{const transcriptions=getTranscriptions();const newTranscription={id:generateId(),...transcriptionData,createdAt:getCurrentTimestamp(),updatedAt:getCurrentTimestamp()};transcriptions.push(newTranscription);localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS,JSON.stringify(transcriptions));// Also save to history\naddToHistory({type:'transcription',action:'created',transcriptionId:newTranscription.id,title:transcriptionData.title||'Nova Transcrição',platform:transcriptionData.platform,duration:transcriptionData.duration});return newTranscription;}catch(error){console.error('Erro ao salvar transcrição:',error);throw new Error('Falha ao salvar transcrição');}};export const getTranscriptions=()=>{try{const stored=localStorage.getItem(STORAGE_KEYS.TRANSCRIPTIONS);return stored?JSON.parse(stored):[];}catch(error){console.error('Erro ao carregar transcrições:',error);return[];}};export const getTranscriptionById=id=>{const transcriptions=getTranscriptions();return transcriptions.find(t=>t.id===id)||null;};export const updateTranscription=(id,updateData)=>{try{const transcriptions=getTranscriptions();const index=transcriptions.findIndex(t=>t.id===id);if(index===-1){throw new Error('Transcrição não encontrada');}transcriptions[index]={...transcriptions[index],...updateData,updatedAt:getCurrentTimestamp()};localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS,JSON.stringify(transcriptions));addToHistory({type:'transcription',action:'updated',transcriptionId:id,title:transcriptions[index].title||'Transcrição Atualizada'});return transcriptions[index];}catch(error){console.error('Erro ao atualizar transcrição:',error);throw error;}};export const deleteTranscription=id=>{try{const transcriptions=getTranscriptions();const index=transcriptions.findIndex(t=>t.id===id);if(index===-1){throw new Error('Transcrição não encontrada');}const deleted=transcriptions.splice(index,1)[0];localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS,JSON.stringify(transcriptions));addToHistory({type:'transcription',action:'deleted',transcriptionId:id,title:deleted.title||'Transcrição Deletada'});return true;}catch(error){console.error('Erro ao deletar transcrição:',error);throw error;}};// History Management\nexport const addToHistory=historyItem=>{try{const history=getHistory();const newItem={id:generateId(),...historyItem,timestamp:getCurrentTimestamp()};history.unshift(newItem);// Add to beginning\n// Keep only last 1000 items\nif(history.length>1000){history.splice(1000);}localStorage.setItem(STORAGE_KEYS.HISTORY,JSON.stringify(history));return newItem;}catch(error){console.error('Erro ao adicionar ao histórico:',error);}};export const getHistory=function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{const stored=localStorage.getItem(STORAGE_KEYS.HISTORY);const history=stored?JSON.parse(stored):[];return limit?history.slice(0,limit):history;}catch(error){console.error('Erro ao carregar histórico:',error);return[];}};export const clearHistory=()=>{try{localStorage.setItem(STORAGE_KEYS.HISTORY,JSON.stringify([]));return true;}catch(error){console.error('Erro ao limpar histórico:',error);throw new Error('Falha ao limpar histórico');}};// Metrics Management\nexport const updateMetrics=metricData=>{try{const metrics=getMetrics();const today=new Date().toISOString().split('T')[0];// Update daily metrics\nif(!metrics.daily[today]){metrics.daily[today]={transcriptions:0,duration:0,apiCalls:0,errors:0};}// Update metrics based on type\nswitch(metricData.type){case'transcription':metrics.daily[today].transcriptions+=1;metrics.daily[today].duration+=metricData.duration||0;metrics.total.transcriptions+=1;metrics.total.duration+=metricData.duration||0;break;case'api_call':metrics.daily[today].apiCalls+=1;metrics.total.apiCalls+=1;break;case'error':metrics.daily[today].errors+=1;metrics.total.errors+=1;break;default:break;}metrics.lastUpdated=getCurrentTimestamp();localStorage.setItem(STORAGE_KEYS.METRICS,JSON.stringify(metrics));return metrics;}catch(error){console.error('Erro ao atualizar métricas:',error);}};export const getMetrics=()=>{try{const stored=localStorage.getItem(STORAGE_KEYS.METRICS);if(stored){return JSON.parse(stored);}// Initialize default metrics\nconst defaultMetrics={total:{transcriptions:0,duration:0,apiCalls:0,errors:0},daily:{},lastUpdated:getCurrentTimestamp()};localStorage.setItem(STORAGE_KEYS.METRICS,JSON.stringify(defaultMetrics));return defaultMetrics;}catch(error){console.error('Erro ao carregar métricas:',error);return{total:{transcriptions:0,duration:0,apiCalls:0,errors:0},daily:{},lastUpdated:getCurrentTimestamp()};}};// Settings Management\nexport const saveSettings=settings=>{try{const currentSettings=getSettings();const updatedSettings={...currentSettings,...settings,updatedAt:getCurrentTimestamp()};localStorage.setItem(STORAGE_KEYS.SETTINGS,JSON.stringify(updatedSettings));return updatedSettings;}catch(error){console.error('Erro ao salvar configurações:',error);throw new Error('Falha ao salvar configurações');}};export const getSettings=()=>{try{const stored=localStorage.getItem(STORAGE_KEYS.SETTINGS);if(stored){return JSON.parse(stored);}// Default settings\nconst defaultSettings={theme:'light',language:'pt-BR',autoSave:true,notifications:true,apiKeys:{openai:''// rapidapi removido conforme solicitado\n},transcriptionSettings:{model:'whisper-1',language:'auto',prompt:''},createdAt:getCurrentTimestamp(),updatedAt:getCurrentTimestamp()};localStorage.setItem(STORAGE_KEYS.SETTINGS,JSON.stringify(defaultSettings));return defaultSettings;}catch(error){console.error('Erro ao carregar configurações:',error);return{};}};// Logs Management\nexport const addLog=logData=>{try{const logs=getLogs();const newLog={id:generateId(),...logData,timestamp:getCurrentTimestamp()};logs.unshift(newLog);// Keep only last 500 logs\nif(logs.length>500){logs.splice(500);}localStorage.setItem(STORAGE_KEYS.LOGS,JSON.stringify(logs));return newLog;}catch(error){console.error('Erro ao adicionar log:',error);}};export const getLogs=function(){let level=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const stored=localStorage.getItem(STORAGE_KEYS.LOGS);let logs=stored?JSON.parse(stored):[];if(level){logs=logs.filter(log=>log.level===level);}return limit?logs.slice(0,limit):logs;}catch(error){console.error('Erro ao carregar logs:',error);return[];}};export const clearLogs=()=>{try{localStorage.setItem(STORAGE_KEYS.LOGS,JSON.stringify([]));return true;}catch(error){console.error('Erro ao limpar logs:',error);throw new Error('Falha ao limpar logs');}};// Data Export/Import\nexport const exportData=()=>{try{const data={transcriptions:getTranscriptions(),history:getHistory(),metrics:getMetrics(),settings:getSettings(),logs:getLogs(),exportedAt:getCurrentTimestamp()};return JSON.stringify(data,null,2);}catch(error){console.error('Erro ao exportar dados:',error);throw new Error('Falha ao exportar dados');}};export const importData=jsonData=>{try{const data=JSON.parse(jsonData);if(data.transcriptions){localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS,JSON.stringify(data.transcriptions));}if(data.history){localStorage.setItem(STORAGE_KEYS.HISTORY,JSON.stringify(data.history));}if(data.metrics){localStorage.setItem(STORAGE_KEYS.METRICS,JSON.stringify(data.metrics));}if(data.settings){localStorage.setItem(STORAGE_KEYS.SETTINGS,JSON.stringify(data.settings));}if(data.logs){localStorage.setItem(STORAGE_KEYS.LOGS,JSON.stringify(data.logs));}return true;}catch(error){console.error('Erro ao importar dados:',error);throw new Error('Falha ao importar dados');}};// Storage cleanup\nexport const clearAllData=()=>{try{Object.values(STORAGE_KEYS).forEach(key=>{localStorage.removeItem(key);});return true;}catch(error){console.error('Erro ao limpar dados:',error);throw new Error('Falha ao limpar dados');}};","map":{"version":3,"names":["STORAGE_KEYS","TRANSCRIPTIONS","HISTORY","METRICS","SETTINGS","LOGS","generateId","Date","now","toString","Math","random","substr","getCurrentTimestamp","toISOString","saveTranscription","transcriptionData","transcriptions","getTranscriptions","newTranscription","id","createdAt","updatedAt","push","localStorage","setItem","JSON","stringify","addToHistory","type","action","transcriptionId","title","platform","duration","error","console","Error","stored","getItem","parse","getTranscriptionById","find","t","updateTranscription","updateData","index","findIndex","deleteTranscription","deleted","splice","historyItem","history","getHistory","newItem","timestamp","unshift","length","limit","arguments","undefined","slice","clearHistory","updateMetrics","metricData","metrics","getMetrics","today","split","daily","apiCalls","errors","total","lastUpdated","defaultMetrics","saveSettings","settings","currentSettings","getSettings","updatedSettings","defaultSettings","theme","language","autoSave","notifications","apiKeys","openai","transcriptionSettings","model","prompt","addLog","logData","logs","getLogs","newLog","level","filter","log","clearLogs","exportData","data","exportedAt","importData","jsonData","clearAllData","Object","values","forEach","key","removeItem"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/services/storageService.js"],"sourcesContent":["// Local Storage Service for Transcriptions, History, and Metrics\n\n// Storage keys\nconst STORAGE_KEYS = {\n  TRANSCRIPTIONS: 'transkipta_transcriptions',\n  HISTORY: 'transkipta_history',\n  METRICS: 'transkipta_metrics',\n  SETTINGS: 'transkipta_settings',\n  LOGS: 'transkipta_logs'\n};\n\n// Utility functions\nconst generateId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\nconst getCurrentTimestamp = () => {\n  return new Date().toISOString();\n};\n\n// Transcription Management\nexport const saveTranscription = (transcriptionData) => {\n  try {\n    const transcriptions = getTranscriptions();\n    const newTranscription = {\n      id: generateId(),\n      ...transcriptionData,\n      createdAt: getCurrentTimestamp(),\n      updatedAt: getCurrentTimestamp()\n    };\n    \n    transcriptions.push(newTranscription);\n    localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS, JSON.stringify(transcriptions));\n    \n    // Also save to history\n    addToHistory({\n      type: 'transcription',\n      action: 'created',\n      transcriptionId: newTranscription.id,\n      title: transcriptionData.title || 'Nova Transcrição',\n      platform: transcriptionData.platform,\n      duration: transcriptionData.duration\n    });\n    \n    return newTranscription;\n  } catch (error) {\n    console.error('Erro ao salvar transcrição:', error);\n    throw new Error('Falha ao salvar transcrição');\n  }\n};\n\nexport const getTranscriptions = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.TRANSCRIPTIONS);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Erro ao carregar transcrições:', error);\n    return [];\n  }\n};\n\nexport const getTranscriptionById = (id) => {\n  const transcriptions = getTranscriptions();\n  return transcriptions.find(t => t.id === id) || null;\n};\n\nexport const updateTranscription = (id, updateData) => {\n  try {\n    const transcriptions = getTranscriptions();\n    const index = transcriptions.findIndex(t => t.id === id);\n    \n    if (index === -1) {\n      throw new Error('Transcrição não encontrada');\n    }\n    \n    transcriptions[index] = {\n      ...transcriptions[index],\n      ...updateData,\n      updatedAt: getCurrentTimestamp()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS, JSON.stringify(transcriptions));\n    \n    addToHistory({\n      type: 'transcription',\n      action: 'updated',\n      transcriptionId: id,\n      title: transcriptions[index].title || 'Transcrição Atualizada'\n    });\n    \n    return transcriptions[index];\n  } catch (error) {\n    console.error('Erro ao atualizar transcrição:', error);\n    throw error;\n  }\n};\n\nexport const deleteTranscription = (id) => {\n  try {\n    const transcriptions = getTranscriptions();\n    const index = transcriptions.findIndex(t => t.id === id);\n    \n    if (index === -1) {\n      throw new Error('Transcrição não encontrada');\n    }\n    \n    const deleted = transcriptions.splice(index, 1)[0];\n    localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS, JSON.stringify(transcriptions));\n    \n    addToHistory({\n      type: 'transcription',\n      action: 'deleted',\n      transcriptionId: id,\n      title: deleted.title || 'Transcrição Deletada'\n    });\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao deletar transcrição:', error);\n    throw error;\n  }\n};\n\n// History Management\nexport const addToHistory = (historyItem) => {\n  try {\n    const history = getHistory();\n    const newItem = {\n      id: generateId(),\n      ...historyItem,\n      timestamp: getCurrentTimestamp()\n    };\n    \n    history.unshift(newItem); // Add to beginning\n    \n    // Keep only last 1000 items\n    if (history.length > 1000) {\n      history.splice(1000);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.HISTORY, JSON.stringify(history));\n    return newItem;\n  } catch (error) {\n    console.error('Erro ao adicionar ao histórico:', error);\n  }\n};\n\nexport const getHistory = (limit = null) => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.HISTORY);\n    const history = stored ? JSON.parse(stored) : [];\n    \n    return limit ? history.slice(0, limit) : history;\n  } catch (error) {\n    console.error('Erro ao carregar histórico:', error);\n    return [];\n  }\n};\n\nexport const clearHistory = () => {\n  try {\n    localStorage.setItem(STORAGE_KEYS.HISTORY, JSON.stringify([]));\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar histórico:', error);\n    throw new Error('Falha ao limpar histórico');\n  }\n};\n\n// Metrics Management\nexport const updateMetrics = (metricData) => {\n  try {\n    const metrics = getMetrics();\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Update daily metrics\n    if (!metrics.daily[today]) {\n      metrics.daily[today] = {\n        transcriptions: 0,\n        duration: 0,\n        apiCalls: 0,\n        errors: 0\n      };\n    }\n    \n    // Update metrics based on type\n    switch (metricData.type) {\n      case 'transcription':\n        metrics.daily[today].transcriptions += 1;\n        metrics.daily[today].duration += metricData.duration || 0;\n        metrics.total.transcriptions += 1;\n        metrics.total.duration += metricData.duration || 0;\n        break;\n      case 'api_call':\n        metrics.daily[today].apiCalls += 1;\n        metrics.total.apiCalls += 1;\n        break;\n      case 'error':\n        metrics.daily[today].errors += 1;\n        metrics.total.errors += 1;\n        break;\n      default:\n        break;\n    }\n    \n    metrics.lastUpdated = getCurrentTimestamp();\n    localStorage.setItem(STORAGE_KEYS.METRICS, JSON.stringify(metrics));\n    \n    return metrics;\n  } catch (error) {\n    console.error('Erro ao atualizar métricas:', error);\n  }\n};\n\nexport const getMetrics = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.METRICS);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    \n    // Initialize default metrics\n    const defaultMetrics = {\n      total: {\n        transcriptions: 0,\n        duration: 0,\n        apiCalls: 0,\n        errors: 0\n      },\n      daily: {},\n      lastUpdated: getCurrentTimestamp()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.METRICS, JSON.stringify(defaultMetrics));\n    return defaultMetrics;\n  } catch (error) {\n    console.error('Erro ao carregar métricas:', error);\n    return {\n      total: { transcriptions: 0, duration: 0, apiCalls: 0, errors: 0 },\n      daily: {},\n      lastUpdated: getCurrentTimestamp()\n    };\n  }\n};\n\n// Settings Management\nexport const saveSettings = (settings) => {\n  try {\n    const currentSettings = getSettings();\n    const updatedSettings = {\n      ...currentSettings,\n      ...settings,\n      updatedAt: getCurrentTimestamp()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(updatedSettings));\n    return updatedSettings;\n  } catch (error) {\n    console.error('Erro ao salvar configurações:', error);\n    throw new Error('Falha ao salvar configurações');\n  }\n};\n\nexport const getSettings = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    \n    // Default settings\n    const defaultSettings = {\n      theme: 'light',\n      language: 'pt-BR',\n      autoSave: true,\n      notifications: true,\n      apiKeys: {\n        openai: ''\n        // rapidapi removido conforme solicitado\n      },\n      transcriptionSettings: {\n        model: 'whisper-1',\n        language: 'auto',\n        prompt: ''\n      },\n      createdAt: getCurrentTimestamp(),\n      updatedAt: getCurrentTimestamp()\n    };\n    \n    localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(defaultSettings));\n    return defaultSettings;\n  } catch (error) {\n    console.error('Erro ao carregar configurações:', error);\n    return {};\n  }\n};\n\n// Logs Management\nexport const addLog = (logData) => {\n  try {\n    const logs = getLogs();\n    const newLog = {\n      id: generateId(),\n      ...logData,\n      timestamp: getCurrentTimestamp()\n    };\n    \n    logs.unshift(newLog);\n    \n    // Keep only last 500 logs\n    if (logs.length > 500) {\n      logs.splice(500);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.LOGS, JSON.stringify(logs));\n    return newLog;\n  } catch (error) {\n    console.error('Erro ao adicionar log:', error);\n  }\n};\n\nexport const getLogs = (level = null, limit = null) => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.LOGS);\n    let logs = stored ? JSON.parse(stored) : [];\n    \n    if (level) {\n      logs = logs.filter(log => log.level === level);\n    }\n    \n    return limit ? logs.slice(0, limit) : logs;\n  } catch (error) {\n    console.error('Erro ao carregar logs:', error);\n    return [];\n  }\n};\n\nexport const clearLogs = () => {\n  try {\n    localStorage.setItem(STORAGE_KEYS.LOGS, JSON.stringify([]));\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar logs:', error);\n    throw new Error('Falha ao limpar logs');\n  }\n};\n\n// Data Export/Import\nexport const exportData = () => {\n  try {\n    const data = {\n      transcriptions: getTranscriptions(),\n      history: getHistory(),\n      metrics: getMetrics(),\n      settings: getSettings(),\n      logs: getLogs(),\n      exportedAt: getCurrentTimestamp()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  } catch (error) {\n    console.error('Erro ao exportar dados:', error);\n    throw new Error('Falha ao exportar dados');\n  }\n};\n\nexport const importData = (jsonData) => {\n  try {\n    const data = JSON.parse(jsonData);\n    \n    if (data.transcriptions) {\n      localStorage.setItem(STORAGE_KEYS.TRANSCRIPTIONS, JSON.stringify(data.transcriptions));\n    }\n    \n    if (data.history) {\n      localStorage.setItem(STORAGE_KEYS.HISTORY, JSON.stringify(data.history));\n    }\n    \n    if (data.metrics) {\n      localStorage.setItem(STORAGE_KEYS.METRICS, JSON.stringify(data.metrics));\n    }\n    \n    if (data.settings) {\n      localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(data.settings));\n    }\n    \n    if (data.logs) {\n      localStorage.setItem(STORAGE_KEYS.LOGS, JSON.stringify(data.logs));\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao importar dados:', error);\n    throw new Error('Falha ao importar dados');\n  }\n};\n\n// Storage cleanup\nexport const clearAllData = () => {\n  try {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n    return true;\n  } catch (error) {\n    console.error('Erro ao limpar dados:', error);\n    throw new Error('Falha ao limpar dados');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}