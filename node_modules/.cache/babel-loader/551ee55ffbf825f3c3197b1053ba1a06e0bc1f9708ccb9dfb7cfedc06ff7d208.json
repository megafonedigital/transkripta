{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Afonso\\\\Desktop\\\\Transkipta\\\\src\\\\components\\\\TranscriptionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport replicateService from '../services/replicateService';\nimport webhookService from '../services/webhookService';\n\n/**\n * Componente para exibir e gerenciar status de transcrições em andamento\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptionStatus = ({\n  onTranscriptionComplete\n}) => {\n  _s();\n  const [predictions, setPredictions] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Carregar predições do localStorage na inicialização\n  useEffect(() => {\n    loadPredictions();\n\n    // Listener para webhooks recebidos\n    const handleWebhookReceived = event => {\n      const {\n        predictionId,\n        status,\n        output,\n        error\n      } = event.detail;\n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status,\n          output,\n          error,\n          updatedAt: new Date().toISOString(),\n          webhookReceived: true\n        }\n      }));\n\n      // Notificar conclusão se necessário\n      if (status === 'succeeded' && output && onTranscriptionComplete) {\n        const transcriptionText = webhookService.extractTranscriptionText(output);\n        const details = webhookService.getTranscriptionDetails(output);\n        onTranscriptionComplete({\n          predictionId,\n          text: transcriptionText,\n          details,\n          output\n        });\n      }\n    };\n    window.addEventListener('replicateWebhookReceived', handleWebhookReceived);\n\n    // Polling para verificar status (fallback caso webhook falhe)\n    const pollInterval = setInterval(() => {\n      checkPendingPredictions();\n    }, 10000); // Verificar a cada 10 segundos\n\n    return () => {\n      window.removeEventListener('replicateWebhookReceived', handleWebhookReceived);\n      clearInterval(pollInterval);\n    };\n  }, [onTranscriptionComplete]);\n\n  /**\n   * Carrega predições do localStorage\n   */\n  const loadPredictions = () => {\n    try {\n      const stored = replicateService.getPredictions();\n      setPredictions(stored);\n    } catch (error) {\n      console.error('Erro ao carregar predições:', error);\n      setError('Erro ao carregar histórico de transcrições');\n    }\n  };\n\n  /**\n   * Verifica status de predições pendentes via API\n   */\n  const checkPendingPredictions = async () => {\n    const pendingPredictions = Object.entries(predictions).filter(([id, prediction]) => ['starting', 'processing'].includes(prediction.status) && !prediction.webhookReceived);\n    if (pendingPredictions.length === 0) return;\n    setLoading(true);\n    try {\n      for (const [predictionId] of pendingPredictions) {\n        const updatedPrediction = await replicateService.getPrediction(predictionId);\n        if (updatedPrediction) {\n          setPredictions(prev => ({\n            ...prev,\n            [predictionId]: {\n              ...prev[predictionId],\n              ...updatedPrediction,\n              updatedAt: new Date().toISOString()\n            }\n          }));\n\n          // Notificar conclusão se necessário\n          if (updatedPrediction.status === 'succeeded' && updatedPrediction.output && onTranscriptionComplete) {\n            const transcriptionText = webhookService.extractTranscriptionText(updatedPrediction.output);\n            const details = webhookService.getTranscriptionDetails(updatedPrediction.output);\n            onTranscriptionComplete({\n              predictionId,\n              text: transcriptionText,\n              details,\n              output: updatedPrediction.output\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar predições:', error);\n      setError('Erro ao verificar status das transcrições');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Cancela uma predição\n   */\n  const cancelPrediction = async predictionId => {\n    try {\n      setLoading(true);\n      await replicateService.cancelPrediction(predictionId);\n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status: 'canceled',\n          updatedAt: new Date().toISOString()\n        }\n      }));\n    } catch (error) {\n      console.error('Erro ao cancelar predição:', error);\n      setError('Erro ao cancelar transcrição');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Remove uma predição do histórico\n   */\n  const removePrediction = predictionId => {\n    setPredictions(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[predictionId];\n\n      // Atualizar localStorage\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem('replicate_predictions', JSON.stringify(updated));\n      }\n      return updated;\n    });\n  };\n\n  /**\n   * Limpa predições antigas (concluídas há mais de 24h)\n   */\n  const clearOldPredictions = () => {\n    replicateService.cleanupOldPredictions();\n    loadPredictions();\n  };\n\n  /**\n   * Obtém ícone para o status\n   */\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'starting':\n        return '🔄';\n      case 'processing':\n        return '⚙️';\n      case 'succeeded':\n        return '✅';\n      case 'failed':\n        return '❌';\n      case 'canceled':\n        return '⏹️';\n      default:\n        return '❓';\n    }\n  };\n\n  /**\n   * Obtém cor para o status\n   */\n  const getStatusColor = status => {\n    switch (status) {\n      case 'starting':\n      case 'processing':\n        return '#2196F3';\n      case 'succeeded':\n        return '#4CAF50';\n      case 'failed':\n        return '#F44336';\n      case 'canceled':\n        return '#FF9800';\n      default:\n        return '#757575';\n    }\n  };\n\n  /**\n   * Formata duração\n   */\n  const formatDuration = (createdAt, updatedAt) => {\n    if (!createdAt) return '';\n    const start = new Date(createdAt);\n    const end = updatedAt ? new Date(updatedAt) : new Date();\n    const duration = Math.floor((end - start) / 1000);\n    if (duration < 60) return `${duration}s`;\n    if (duration < 3600) return `${Math.floor(duration / 60)}m ${duration % 60}s`;\n    return `${Math.floor(duration / 3600)}h ${Math.floor(duration % 3600 / 60)}m`;\n  };\n  const predictionList = Object.entries(predictions).sort(([, a], [, b]) => new Date(b.createdAt) - new Date(a.createdAt));\n  if (predictionList.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcription-status empty\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nenhuma transcri\\xE7\\xE3o em andamento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcription-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Status das Transcri\\xE7\\xF5es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearOldPredictions,\n          className: \"btn-secondary\",\n          title: \"Limpar transcri\\xE7\\xF5es antigas\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Limpar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadPredictions,\n          className: \"btn-secondary\",\n          disabled: loading,\n          title: \"Atualizar status\",\n          children: [loading ? '🔄' : '↻', \" Atualizar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predictions-list\",\n      children: predictionList.map(([predictionId, prediction]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prediction-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-indicator\",\n            style: {\n              color: getStatusColor(prediction.status)\n            },\n            children: [getStatusIcon(prediction.status), \" \", webhookService.getStatusMessage(prediction.status)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prediction-actions\",\n            children: [['starting', 'processing'].includes(prediction.status) && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => cancelPrediction(predictionId),\n              className: \"btn-cancel\",\n              disabled: loading,\n              title: \"Cancelar transcri\\xE7\\xE3o\",\n              children: \"\\u23F9\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removePrediction(predictionId),\n              className: \"btn-remove\",\n              title: \"Remover do hist\\xF3rico\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), \" \", predictionId.substring(0, 8), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Arquivo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this), \" \", prediction.audioUrl ? prediction.audioUrl.split('/').pop() : 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Dura\\xE7\\xE3o:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this), \" \", formatDuration(prediction.createdAt, prediction.updatedAt)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), prediction.webhookReceived && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"webhook-badge\",\n              children: \"\\uD83D\\uDCE1 Webhook recebido\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), prediction.error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Erro:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this), \" \", prediction.error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this), prediction.output && prediction.status === 'succeeded' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-output\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Resultado:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transcription-preview\",\n            children: [webhookService.extractTranscriptionText(prediction.output).substring(0, 200), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this)]\n      }, predictionId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .transcription-status {\n          background: #f8f9fa;\n          border-radius: 8px;\n          padding: 16px;\n          margin: 16px 0;\n        }\n        \n        .status-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 16px;\n        }\n        \n        .status-header h3 {\n          margin: 0;\n          color: #333;\n        }\n        \n        .status-actions {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: white;\n          border: none;\n          padding: 6px 12px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .btn-secondary:hover {\n          background: #5a6268;\n        }\n        \n        .btn-secondary:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n        \n        .error-message {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 12px;\n          border-radius: 4px;\n          margin-bottom: 16px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .predictions-list {\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        }\n        \n        .prediction-item {\n          background: white;\n          border: 1px solid #dee2e6;\n          border-radius: 6px;\n          padding: 12px;\n        }\n        \n        .prediction-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .status-indicator {\n          font-weight: 500;\n          font-size: 14px;\n        }\n        \n        .prediction-actions {\n          display: flex;\n          gap: 4px;\n        }\n        \n        .btn-cancel, .btn-remove {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n          border-radius: 3px;\n          font-size: 14px;\n        }\n        \n        .btn-cancel:hover {\n          background: #fff3cd;\n        }\n        \n        .btn-remove:hover {\n          background: #f8d7da;\n        }\n        \n        .prediction-details {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 8px;\n          font-size: 12px;\n          color: #6c757d;\n        }\n        \n        .detail-item strong {\n          color: #495057;\n        }\n        \n        .webhook-badge {\n          background: #d4edda;\n          color: #155724;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 11px;\n        }\n        \n        .prediction-error {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .prediction-output {\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .transcription-preview {\n          background: #e9ecef;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-style: italic;\n          color: #495057;\n        }\n        \n        .empty {\n          text-align: center;\n          color: #6c757d;\n          padding: 32px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(TranscriptionStatus, \"tW7p3OI0C/mCBLxRxiSEzap9M7s=\");\n_c = TranscriptionStatus;\nexport default TranscriptionStatus;\nvar _c;\n$RefreshReg$(_c, \"TranscriptionStatus\");","map":{"version":3,"names":["React","useState","useEffect","replicateService","webhookService","jsxDEV","_jsxDEV","TranscriptionStatus","onTranscriptionComplete","_s","predictions","setPredictions","loading","setLoading","error","setError","loadPredictions","handleWebhookReceived","event","predictionId","status","output","detail","prev","updatedAt","Date","toISOString","webhookReceived","transcriptionText","extractTranscriptionText","details","getTranscriptionDetails","text","window","addEventListener","pollInterval","setInterval","checkPendingPredictions","removeEventListener","clearInterval","stored","getPredictions","console","pendingPredictions","Object","entries","filter","id","prediction","includes","length","updatedPrediction","getPrediction","cancelPrediction","removePrediction","updated","localStorage","setItem","JSON","stringify","clearOldPredictions","cleanupOldPredictions","getStatusIcon","getStatusColor","formatDuration","createdAt","start","end","duration","Math","floor","predictionList","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","disabled","map","style","color","getStatusMessage","substring","audioUrl","split","pop","jsx","_c","$RefreshReg$"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/components/TranscriptionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport replicateService from '../services/replicateService';\nimport webhookService from '../services/webhookService';\n\n/**\n * Componente para exibir e gerenciar status de transcrições em andamento\n */\nconst TranscriptionStatus = ({ onTranscriptionComplete }) => {\n  const [predictions, setPredictions] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Carregar predições do localStorage na inicialização\n  useEffect(() => {\n    loadPredictions();\n    \n    // Listener para webhooks recebidos\n    const handleWebhookReceived = (event) => {\n      const { predictionId, status, output, error } = event.detail;\n      \n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status,\n          output,\n          error,\n          updatedAt: new Date().toISOString(),\n          webhookReceived: true\n        }\n      }));\n      \n      // Notificar conclusão se necessário\n      if (status === 'succeeded' && output && onTranscriptionComplete) {\n        const transcriptionText = webhookService.extractTranscriptionText(output);\n        const details = webhookService.getTranscriptionDetails(output);\n        \n        onTranscriptionComplete({\n          predictionId,\n          text: transcriptionText,\n          details,\n          output\n        });\n      }\n    };\n    \n    window.addEventListener('replicateWebhookReceived', handleWebhookReceived);\n    \n    // Polling para verificar status (fallback caso webhook falhe)\n    const pollInterval = setInterval(() => {\n      checkPendingPredictions();\n    }, 10000); // Verificar a cada 10 segundos\n    \n    return () => {\n      window.removeEventListener('replicateWebhookReceived', handleWebhookReceived);\n      clearInterval(pollInterval);\n    };\n  }, [onTranscriptionComplete]);\n\n  /**\n   * Carrega predições do localStorage\n   */\n  const loadPredictions = () => {\n    try {\n      const stored = replicateService.getPredictions();\n      setPredictions(stored);\n    } catch (error) {\n      console.error('Erro ao carregar predições:', error);\n      setError('Erro ao carregar histórico de transcrições');\n    }\n  };\n\n  /**\n   * Verifica status de predições pendentes via API\n   */\n  const checkPendingPredictions = async () => {\n    const pendingPredictions = Object.entries(predictions).filter(\n      ([id, prediction]) => \n        ['starting', 'processing'].includes(prediction.status) &&\n        !prediction.webhookReceived\n    );\n    \n    if (pendingPredictions.length === 0) return;\n    \n    setLoading(true);\n    \n    try {\n      for (const [predictionId] of pendingPredictions) {\n        const updatedPrediction = await replicateService.getPrediction(predictionId);\n        \n        if (updatedPrediction) {\n          setPredictions(prev => ({\n            ...prev,\n            [predictionId]: {\n              ...prev[predictionId],\n              ...updatedPrediction,\n              updatedAt: new Date().toISOString()\n            }\n          }));\n          \n          // Notificar conclusão se necessário\n          if (updatedPrediction.status === 'succeeded' && updatedPrediction.output && onTranscriptionComplete) {\n            const transcriptionText = webhookService.extractTranscriptionText(updatedPrediction.output);\n            const details = webhookService.getTranscriptionDetails(updatedPrediction.output);\n            \n            onTranscriptionComplete({\n              predictionId,\n              text: transcriptionText,\n              details,\n              output: updatedPrediction.output\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar predições:', error);\n      setError('Erro ao verificar status das transcrições');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Cancela uma predição\n   */\n  const cancelPrediction = async (predictionId) => {\n    try {\n      setLoading(true);\n      await replicateService.cancelPrediction(predictionId);\n      \n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status: 'canceled',\n          updatedAt: new Date().toISOString()\n        }\n      }));\n    } catch (error) {\n      console.error('Erro ao cancelar predição:', error);\n      setError('Erro ao cancelar transcrição');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Remove uma predição do histórico\n   */\n  const removePrediction = (predictionId) => {\n    setPredictions(prev => {\n      const updated = { ...prev };\n      delete updated[predictionId];\n      \n      // Atualizar localStorage\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem('replicate_predictions', JSON.stringify(updated));\n      }\n      \n      return updated;\n    });\n  };\n\n  /**\n   * Limpa predições antigas (concluídas há mais de 24h)\n   */\n  const clearOldPredictions = () => {\n    replicateService.cleanupOldPredictions();\n    loadPredictions();\n  };\n\n  /**\n   * Obtém ícone para o status\n   */\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'starting':\n        return '🔄';\n      case 'processing':\n        return '⚙️';\n      case 'succeeded':\n        return '✅';\n      case 'failed':\n        return '❌';\n      case 'canceled':\n        return '⏹️';\n      default:\n        return '❓';\n    }\n  };\n\n  /**\n   * Obtém cor para o status\n   */\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'starting':\n      case 'processing':\n        return '#2196F3';\n      case 'succeeded':\n        return '#4CAF50';\n      case 'failed':\n        return '#F44336';\n      case 'canceled':\n        return '#FF9800';\n      default:\n        return '#757575';\n    }\n  };\n\n  /**\n   * Formata duração\n   */\n  const formatDuration = (createdAt, updatedAt) => {\n    if (!createdAt) return '';\n    \n    const start = new Date(createdAt);\n    const end = updatedAt ? new Date(updatedAt) : new Date();\n    const duration = Math.floor((end - start) / 1000);\n    \n    if (duration < 60) return `${duration}s`;\n    if (duration < 3600) return `${Math.floor(duration / 60)}m ${duration % 60}s`;\n    return `${Math.floor(duration / 3600)}h ${Math.floor((duration % 3600) / 60)}m`;\n  };\n\n  const predictionList = Object.entries(predictions).sort(\n    ([, a], [, b]) => new Date(b.createdAt) - new Date(a.createdAt)\n  );\n\n  if (predictionList.length === 0) {\n    return (\n      <div className=\"transcription-status empty\">\n        <p>Nenhuma transcrição em andamento</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"transcription-status\">\n      <div className=\"status-header\">\n        <h3>Status das Transcrições</h3>\n        <div className=\"status-actions\">\n          <button \n            onClick={clearOldPredictions}\n            className=\"btn-secondary\"\n            title=\"Limpar transcrições antigas\"\n          >\n            🗑️ Limpar\n          </button>\n          <button \n            onClick={loadPredictions}\n            className=\"btn-secondary\"\n            disabled={loading}\n            title=\"Atualizar status\"\n          >\n            {loading ? '🔄' : '↻'} Atualizar\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          <button onClick={() => setError(null)}>×</button>\n        </div>\n      )}\n\n      <div className=\"predictions-list\">\n        {predictionList.map(([predictionId, prediction]) => (\n          <div key={predictionId} className=\"prediction-item\">\n            <div className=\"prediction-header\">\n              <span \n                className=\"status-indicator\"\n                style={{ color: getStatusColor(prediction.status) }}\n              >\n                {getStatusIcon(prediction.status)} {webhookService.getStatusMessage(prediction.status)}\n              </span>\n              <div className=\"prediction-actions\">\n                {['starting', 'processing'].includes(prediction.status) && (\n                  <button\n                    onClick={() => cancelPrediction(predictionId)}\n                    className=\"btn-cancel\"\n                    disabled={loading}\n                    title=\"Cancelar transcrição\"\n                  >\n                    ⏹️\n                  </button>\n                )}\n                <button\n                  onClick={() => removePrediction(predictionId)}\n                  className=\"btn-remove\"\n                  title=\"Remover do histórico\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"prediction-details\">\n              <div className=\"detail-item\">\n                <strong>ID:</strong> {predictionId.substring(0, 8)}...\n              </div>\n              <div className=\"detail-item\">\n                <strong>Arquivo:</strong> {prediction.audioUrl ? \n                  prediction.audioUrl.split('/').pop() : 'N/A'\n                }\n              </div>\n              <div className=\"detail-item\">\n                <strong>Duração:</strong> {formatDuration(prediction.createdAt, prediction.updatedAt)}\n              </div>\n              {prediction.webhookReceived && (\n                <div className=\"detail-item\">\n                  <span className=\"webhook-badge\">📡 Webhook recebido</span>\n                </div>\n              )}\n            </div>\n            \n            {prediction.error && (\n              <div className=\"prediction-error\">\n                <strong>Erro:</strong> {prediction.error}\n              </div>\n            )}\n            \n            {prediction.output && prediction.status === 'succeeded' && (\n              <div className=\"prediction-output\">\n                <strong>Resultado:</strong>\n                <div className=\"transcription-preview\">\n                  {webhookService.extractTranscriptionText(prediction.output).substring(0, 200)}...\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <style jsx>{`\n        .transcription-status {\n          background: #f8f9fa;\n          border-radius: 8px;\n          padding: 16px;\n          margin: 16px 0;\n        }\n        \n        .status-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 16px;\n        }\n        \n        .status-header h3 {\n          margin: 0;\n          color: #333;\n        }\n        \n        .status-actions {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: white;\n          border: none;\n          padding: 6px 12px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .btn-secondary:hover {\n          background: #5a6268;\n        }\n        \n        .btn-secondary:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n        \n        .error-message {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 12px;\n          border-radius: 4px;\n          margin-bottom: 16px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .predictions-list {\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        }\n        \n        .prediction-item {\n          background: white;\n          border: 1px solid #dee2e6;\n          border-radius: 6px;\n          padding: 12px;\n        }\n        \n        .prediction-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .status-indicator {\n          font-weight: 500;\n          font-size: 14px;\n        }\n        \n        .prediction-actions {\n          display: flex;\n          gap: 4px;\n        }\n        \n        .btn-cancel, .btn-remove {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n          border-radius: 3px;\n          font-size: 14px;\n        }\n        \n        .btn-cancel:hover {\n          background: #fff3cd;\n        }\n        \n        .btn-remove:hover {\n          background: #f8d7da;\n        }\n        \n        .prediction-details {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 8px;\n          font-size: 12px;\n          color: #6c757d;\n        }\n        \n        .detail-item strong {\n          color: #495057;\n        }\n        \n        .webhook-badge {\n          background: #d4edda;\n          color: #155724;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 11px;\n        }\n        \n        .prediction-error {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .prediction-output {\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .transcription-preview {\n          background: #e9ecef;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-style: italic;\n          color: #495057;\n        }\n        \n        .empty {\n          text-align: center;\n          color: #6c757d;\n          padding: 32px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TranscriptionStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}