{"ast":null,"code":"import React,{useState,useEffect}from'react';import replicateService from'../services/replicateService';import webhookService from'../services/webhookService';/**\n * Componente para exibir e gerenciar status de transcrições em andamento\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TranscriptionStatus=_ref=>{let{onTranscriptionComplete}=_ref;const[predictions,setPredictions]=useState({});const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Carregar predições do localStorage na inicialização\nuseEffect(()=>{loadPredictions();// Listener para webhooks recebidos\nconst handleWebhookReceived=event=>{const{predictionId,status,output,error}=event.detail;setPredictions(prev=>({...prev,[predictionId]:{...prev[predictionId],status,output,error,updatedAt:new Date().toISOString(),webhookReceived:true}}));// Notificar conclusão se necessário\nif(status==='succeeded'&&output&&onTranscriptionComplete){const transcriptionText=webhookService.extractTranscriptionText(output);const details=webhookService.getTranscriptionDetails(output);onTranscriptionComplete({predictionId,text:transcriptionText,details,output});}};window.addEventListener('replicateWebhookReceived',handleWebhookReceived);// Polling para verificar status (fallback caso webhook falhe)\nconst pollInterval=setInterval(()=>{checkPendingPredictions();},10000);// Verificar a cada 10 segundos\nreturn()=>{window.removeEventListener('replicateWebhookReceived',handleWebhookReceived);clearInterval(pollInterval);};},[onTranscriptionComplete]);/**\n   * Carrega predições do localStorage\n   */const loadPredictions=()=>{try{const stored=replicateService.getPredictions();setPredictions(stored);}catch(error){console.error('Erro ao carregar predições:',error);setError('Erro ao carregar histórico de transcrições');}};/**\n   * Verifica status de predições pendentes via API\n   */const checkPendingPredictions=async()=>{const pendingPredictions=Object.entries(predictions).filter(_ref2=>{let[id,prediction]=_ref2;return['starting','processing'].includes(prediction.status)&&!prediction.webhookReceived;});if(pendingPredictions.length===0)return;setLoading(true);try{for(const[predictionId]of pendingPredictions){const updatedPrediction=await replicateService.getPrediction(predictionId);if(updatedPrediction){setPredictions(prev=>({...prev,[predictionId]:{...prev[predictionId],...updatedPrediction,updatedAt:new Date().toISOString()}}));// Notificar conclusão se necessário\nif(updatedPrediction.status==='succeeded'&&updatedPrediction.output&&onTranscriptionComplete){const transcriptionText=webhookService.extractTranscriptionText(updatedPrediction.output);const details=webhookService.getTranscriptionDetails(updatedPrediction.output);onTranscriptionComplete({predictionId,text:transcriptionText,details,output:updatedPrediction.output});}}}}catch(error){console.error('Erro ao verificar predições:',error);setError('Erro ao verificar status das transcrições');}finally{setLoading(false);}};/**\n   * Cancela uma predição\n   */const cancelPrediction=async predictionId=>{try{setLoading(true);await replicateService.cancelPrediction(predictionId);setPredictions(prev=>({...prev,[predictionId]:{...prev[predictionId],status:'canceled',updatedAt:new Date().toISOString()}}));}catch(error){console.error('Erro ao cancelar predição:',error);setError('Erro ao cancelar transcrição');}finally{setLoading(false);}};/**\n   * Remove uma predição do histórico\n   */const removePrediction=predictionId=>{setPredictions(prev=>{const updated={...prev};delete updated[predictionId];// Atualizar localStorage\nif(typeof window!=='undefined'&&window.localStorage){localStorage.setItem('replicate_predictions',JSON.stringify(updated));}return updated;});};/**\n   * Limpa predições antigas (concluídas há mais de 24h)\n   */const clearOldPredictions=()=>{replicateService.cleanupOldPredictions();loadPredictions();};/**\n   * Obtém ícone para o status\n   */const getStatusIcon=status=>{switch(status){case'starting':return'🔄';case'processing':return'⚙️';case'succeeded':return'✅';case'failed':return'❌';case'canceled':return'⏹️';default:return'❓';}};/**\n   * Obtém cor para o status\n   */const getStatusColor=status=>{switch(status){case'starting':case'processing':return'#2196F3';case'succeeded':return'#4CAF50';case'failed':return'#F44336';case'canceled':return'#FF9800';default:return'#757575';}};/**\n   * Formata duração\n   */const formatDuration=(createdAt,updatedAt)=>{if(!createdAt)return'';const start=new Date(createdAt);const end=updatedAt?new Date(updatedAt):new Date();const duration=Math.floor((end-start)/1000);if(duration<60)return`${duration}s`;if(duration<3600)return`${Math.floor(duration/60)}m ${duration%60}s`;return`${Math.floor(duration/3600)}h ${Math.floor(duration%3600/60)}m`;};const predictionList=Object.entries(predictions).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return new Date(b.createdAt)-new Date(a.createdAt);});if(predictionList.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"transcription-status empty\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Nenhuma transcri\\xE7\\xE3o em andamento\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"transcription-status\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"status-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Status das Transcri\\xE7\\xF5es\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:clearOldPredictions,className:\"btn-secondary\",title:\"Limpar transcri\\xE7\\xF5es antigas\",children:\"\\uD83D\\uDDD1\\uFE0F Limpar\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:loadPredictions,className:\"btn-secondary\",disabled:loading,title:\"Atualizar status\",children:[loading?'🔄':'↻',\" Atualizar\"]})]})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[error,/*#__PURE__*/_jsx(\"button\",{onClick:()=>setError(null),children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"predictions-list\",children:predictionList.map(_ref5=>{let[predictionId,prediction]=_ref5;return/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"status-indicator\",style:{color:getStatusColor(prediction.status)},children:[getStatusIcon(prediction.status),\" \",webhookService.getStatusMessage(prediction.status)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-actions\",children:[['starting','processing'].includes(prediction.status)&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>cancelPrediction(predictionId),className:\"btn-cancel\",disabled:loading,title:\"Cancelar transcri\\xE7\\xE3o\",children:\"\\u23F9\\uFE0F\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>removePrediction(predictionId),className:\"btn-remove\",title:\"Remover do hist\\xF3rico\",children:\"\\xD7\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"ID:\"}),\" \",predictionId.substring(0,8),\"...\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Arquivo:\"}),\" \",prediction.audioUrl?prediction.audioUrl.split('/').pop():'N/A']}),/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Dura\\xE7\\xE3o:\"}),\" \",formatDuration(prediction.createdAt,prediction.updatedAt)]}),prediction.webhookReceived&&/*#__PURE__*/_jsx(\"div\",{className:\"detail-item\",children:/*#__PURE__*/_jsx(\"span\",{className:\"webhook-badge\",children:\"\\uD83D\\uDCE1 Webhook recebido\"})})]}),prediction.error&&/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-error\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Erro:\"}),\" \",prediction.error]}),prediction.output&&prediction.status==='succeeded'&&/*#__PURE__*/_jsxs(\"div\",{className:\"prediction-output\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Resultado:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"transcription-preview\",children:[webhookService.extractTranscriptionText(prediction.output).substring(0,200),\"...\"]})]})]},predictionId);})}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:`\n        .transcription-status {\n          background: #f8f9fa;\n          border-radius: 8px;\n          padding: 16px;\n          margin: 16px 0;\n        }\n        \n        .status-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 16px;\n        }\n        \n        .status-header h3 {\n          margin: 0;\n          color: #333;\n        }\n        \n        .status-actions {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: white;\n          border: none;\n          padding: 6px 12px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .btn-secondary:hover {\n          background: #5a6268;\n        }\n        \n        .btn-secondary:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n        \n        .error-message {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 12px;\n          border-radius: 4px;\n          margin-bottom: 16px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .predictions-list {\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        }\n        \n        .prediction-item {\n          background: white;\n          border: 1px solid #dee2e6;\n          border-radius: 6px;\n          padding: 12px;\n        }\n        \n        .prediction-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .status-indicator {\n          font-weight: 500;\n          font-size: 14px;\n        }\n        \n        .prediction-actions {\n          display: flex;\n          gap: 4px;\n        }\n        \n        .btn-cancel, .btn-remove {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n          border-radius: 3px;\n          font-size: 14px;\n        }\n        \n        .btn-cancel:hover {\n          background: #fff3cd;\n        }\n        \n        .btn-remove:hover {\n          background: #f8d7da;\n        }\n        \n        .prediction-details {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 8px;\n          font-size: 12px;\n          color: #6c757d;\n        }\n        \n        .detail-item strong {\n          color: #495057;\n        }\n        \n        .webhook-badge {\n          background: #d4edda;\n          color: #155724;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 11px;\n        }\n        \n        .prediction-error {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .prediction-output {\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .transcription-preview {\n          background: #e9ecef;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-style: italic;\n          color: #495057;\n        }\n        \n        .empty {\n          text-align: center;\n          color: #6c757d;\n          padding: 32px;\n        }\n      `})]});};export default TranscriptionStatus;","map":{"version":3,"names":["React","useState","useEffect","replicateService","webhookService","jsx","_jsx","jsxs","_jsxs","TranscriptionStatus","_ref","onTranscriptionComplete","predictions","setPredictions","loading","setLoading","error","setError","loadPredictions","handleWebhookReceived","event","predictionId","status","output","detail","prev","updatedAt","Date","toISOString","webhookReceived","transcriptionText","extractTranscriptionText","details","getTranscriptionDetails","text","window","addEventListener","pollInterval","setInterval","checkPendingPredictions","removeEventListener","clearInterval","stored","getPredictions","console","pendingPredictions","Object","entries","filter","_ref2","id","prediction","includes","length","updatedPrediction","getPrediction","cancelPrediction","removePrediction","updated","localStorage","setItem","JSON","stringify","clearOldPredictions","cleanupOldPredictions","getStatusIcon","getStatusColor","formatDuration","createdAt","start","end","duration","Math","floor","predictionList","sort","_ref3","_ref4","a","b","className","children","onClick","title","disabled","map","_ref5","style","color","getStatusMessage","substring","audioUrl","split","pop"],"sources":["C:/Users/Afonso/Desktop/Transkipta/src/components/TranscriptionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport replicateService from '../services/replicateService';\nimport webhookService from '../services/webhookService';\n\n/**\n * Componente para exibir e gerenciar status de transcrições em andamento\n */\nconst TranscriptionStatus = ({ onTranscriptionComplete }) => {\n  const [predictions, setPredictions] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Carregar predições do localStorage na inicialização\n  useEffect(() => {\n    loadPredictions();\n    \n    // Listener para webhooks recebidos\n    const handleWebhookReceived = (event) => {\n      const { predictionId, status, output, error } = event.detail;\n      \n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status,\n          output,\n          error,\n          updatedAt: new Date().toISOString(),\n          webhookReceived: true\n        }\n      }));\n      \n      // Notificar conclusão se necessário\n      if (status === 'succeeded' && output && onTranscriptionComplete) {\n        const transcriptionText = webhookService.extractTranscriptionText(output);\n        const details = webhookService.getTranscriptionDetails(output);\n        \n        onTranscriptionComplete({\n          predictionId,\n          text: transcriptionText,\n          details,\n          output\n        });\n      }\n    };\n    \n    window.addEventListener('replicateWebhookReceived', handleWebhookReceived);\n    \n    // Polling para verificar status (fallback caso webhook falhe)\n    const pollInterval = setInterval(() => {\n      checkPendingPredictions();\n    }, 10000); // Verificar a cada 10 segundos\n    \n    return () => {\n      window.removeEventListener('replicateWebhookReceived', handleWebhookReceived);\n      clearInterval(pollInterval);\n    };\n  }, [onTranscriptionComplete]);\n\n  /**\n   * Carrega predições do localStorage\n   */\n  const loadPredictions = () => {\n    try {\n      const stored = replicateService.getPredictions();\n      setPredictions(stored);\n    } catch (error) {\n      console.error('Erro ao carregar predições:', error);\n      setError('Erro ao carregar histórico de transcrições');\n    }\n  };\n\n  /**\n   * Verifica status de predições pendentes via API\n   */\n  const checkPendingPredictions = async () => {\n    const pendingPredictions = Object.entries(predictions).filter(\n      ([id, prediction]) => \n        ['starting', 'processing'].includes(prediction.status) &&\n        !prediction.webhookReceived\n    );\n    \n    if (pendingPredictions.length === 0) return;\n    \n    setLoading(true);\n    \n    try {\n      for (const [predictionId] of pendingPredictions) {\n        const updatedPrediction = await replicateService.getPrediction(predictionId);\n        \n        if (updatedPrediction) {\n          setPredictions(prev => ({\n            ...prev,\n            [predictionId]: {\n              ...prev[predictionId],\n              ...updatedPrediction,\n              updatedAt: new Date().toISOString()\n            }\n          }));\n          \n          // Notificar conclusão se necessário\n          if (updatedPrediction.status === 'succeeded' && updatedPrediction.output && onTranscriptionComplete) {\n            const transcriptionText = webhookService.extractTranscriptionText(updatedPrediction.output);\n            const details = webhookService.getTranscriptionDetails(updatedPrediction.output);\n            \n            onTranscriptionComplete({\n              predictionId,\n              text: transcriptionText,\n              details,\n              output: updatedPrediction.output\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar predições:', error);\n      setError('Erro ao verificar status das transcrições');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Cancela uma predição\n   */\n  const cancelPrediction = async (predictionId) => {\n    try {\n      setLoading(true);\n      await replicateService.cancelPrediction(predictionId);\n      \n      setPredictions(prev => ({\n        ...prev,\n        [predictionId]: {\n          ...prev[predictionId],\n          status: 'canceled',\n          updatedAt: new Date().toISOString()\n        }\n      }));\n    } catch (error) {\n      console.error('Erro ao cancelar predição:', error);\n      setError('Erro ao cancelar transcrição');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Remove uma predição do histórico\n   */\n  const removePrediction = (predictionId) => {\n    setPredictions(prev => {\n      const updated = { ...prev };\n      delete updated[predictionId];\n      \n      // Atualizar localStorage\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem('replicate_predictions', JSON.stringify(updated));\n      }\n      \n      return updated;\n    });\n  };\n\n  /**\n   * Limpa predições antigas (concluídas há mais de 24h)\n   */\n  const clearOldPredictions = () => {\n    replicateService.cleanupOldPredictions();\n    loadPredictions();\n  };\n\n  /**\n   * Obtém ícone para o status\n   */\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'starting':\n        return '🔄';\n      case 'processing':\n        return '⚙️';\n      case 'succeeded':\n        return '✅';\n      case 'failed':\n        return '❌';\n      case 'canceled':\n        return '⏹️';\n      default:\n        return '❓';\n    }\n  };\n\n  /**\n   * Obtém cor para o status\n   */\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'starting':\n      case 'processing':\n        return '#2196F3';\n      case 'succeeded':\n        return '#4CAF50';\n      case 'failed':\n        return '#F44336';\n      case 'canceled':\n        return '#FF9800';\n      default:\n        return '#757575';\n    }\n  };\n\n  /**\n   * Formata duração\n   */\n  const formatDuration = (createdAt, updatedAt) => {\n    if (!createdAt) return '';\n    \n    const start = new Date(createdAt);\n    const end = updatedAt ? new Date(updatedAt) : new Date();\n    const duration = Math.floor((end - start) / 1000);\n    \n    if (duration < 60) return `${duration}s`;\n    if (duration < 3600) return `${Math.floor(duration / 60)}m ${duration % 60}s`;\n    return `${Math.floor(duration / 3600)}h ${Math.floor((duration % 3600) / 60)}m`;\n  };\n\n  const predictionList = Object.entries(predictions).sort(\n    ([, a], [, b]) => new Date(b.createdAt) - new Date(a.createdAt)\n  );\n\n  if (predictionList.length === 0) {\n    return (\n      <div className=\"transcription-status empty\">\n        <p>Nenhuma transcrição em andamento</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"transcription-status\">\n      <div className=\"status-header\">\n        <h3>Status das Transcrições</h3>\n        <div className=\"status-actions\">\n          <button \n            onClick={clearOldPredictions}\n            className=\"btn-secondary\"\n            title=\"Limpar transcrições antigas\"\n          >\n            🗑️ Limpar\n          </button>\n          <button \n            onClick={loadPredictions}\n            className=\"btn-secondary\"\n            disabled={loading}\n            title=\"Atualizar status\"\n          >\n            {loading ? '🔄' : '↻'} Atualizar\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          <button onClick={() => setError(null)}>×</button>\n        </div>\n      )}\n\n      <div className=\"predictions-list\">\n        {predictionList.map(([predictionId, prediction]) => (\n          <div key={predictionId} className=\"prediction-item\">\n            <div className=\"prediction-header\">\n              <span \n                className=\"status-indicator\"\n                style={{ color: getStatusColor(prediction.status) }}\n              >\n                {getStatusIcon(prediction.status)} {webhookService.getStatusMessage(prediction.status)}\n              </span>\n              <div className=\"prediction-actions\">\n                {['starting', 'processing'].includes(prediction.status) && (\n                  <button\n                    onClick={() => cancelPrediction(predictionId)}\n                    className=\"btn-cancel\"\n                    disabled={loading}\n                    title=\"Cancelar transcrição\"\n                  >\n                    ⏹️\n                  </button>\n                )}\n                <button\n                  onClick={() => removePrediction(predictionId)}\n                  className=\"btn-remove\"\n                  title=\"Remover do histórico\"\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"prediction-details\">\n              <div className=\"detail-item\">\n                <strong>ID:</strong> {predictionId.substring(0, 8)}...\n              </div>\n              <div className=\"detail-item\">\n                <strong>Arquivo:</strong> {prediction.audioUrl ? \n                  prediction.audioUrl.split('/').pop() : 'N/A'\n                }\n              </div>\n              <div className=\"detail-item\">\n                <strong>Duração:</strong> {formatDuration(prediction.createdAt, prediction.updatedAt)}\n              </div>\n              {prediction.webhookReceived && (\n                <div className=\"detail-item\">\n                  <span className=\"webhook-badge\">📡 Webhook recebido</span>\n                </div>\n              )}\n            </div>\n            \n            {prediction.error && (\n              <div className=\"prediction-error\">\n                <strong>Erro:</strong> {prediction.error}\n              </div>\n            )}\n            \n            {prediction.output && prediction.status === 'succeeded' && (\n              <div className=\"prediction-output\">\n                <strong>Resultado:</strong>\n                <div className=\"transcription-preview\">\n                  {webhookService.extractTranscriptionText(prediction.output).substring(0, 200)}...\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <style jsx>{`\n        .transcription-status {\n          background: #f8f9fa;\n          border-radius: 8px;\n          padding: 16px;\n          margin: 16px 0;\n        }\n        \n        .status-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 16px;\n        }\n        \n        .status-header h3 {\n          margin: 0;\n          color: #333;\n        }\n        \n        .status-actions {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .btn-secondary {\n          background: #6c757d;\n          color: white;\n          border: none;\n          padding: 6px 12px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .btn-secondary:hover {\n          background: #5a6268;\n        }\n        \n        .btn-secondary:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n        \n        .error-message {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 12px;\n          border-radius: 4px;\n          margin-bottom: 16px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .predictions-list {\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        }\n        \n        .prediction-item {\n          background: white;\n          border: 1px solid #dee2e6;\n          border-radius: 6px;\n          padding: 12px;\n        }\n        \n        .prediction-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        \n        .status-indicator {\n          font-weight: 500;\n          font-size: 14px;\n        }\n        \n        .prediction-actions {\n          display: flex;\n          gap: 4px;\n        }\n        \n        .btn-cancel, .btn-remove {\n          background: none;\n          border: none;\n          cursor: pointer;\n          padding: 4px;\n          border-radius: 3px;\n          font-size: 14px;\n        }\n        \n        .btn-cancel:hover {\n          background: #fff3cd;\n        }\n        \n        .btn-remove:hover {\n          background: #f8d7da;\n        }\n        \n        .prediction-details {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 8px;\n          font-size: 12px;\n          color: #6c757d;\n        }\n        \n        .detail-item strong {\n          color: #495057;\n        }\n        \n        .webhook-badge {\n          background: #d4edda;\n          color: #155724;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 11px;\n        }\n        \n        .prediction-error {\n          background: #f8d7da;\n          color: #721c24;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .prediction-output {\n          margin-top: 8px;\n          font-size: 12px;\n        }\n        \n        .transcription-preview {\n          background: #e9ecef;\n          padding: 8px;\n          border-radius: 4px;\n          margin-top: 4px;\n          font-style: italic;\n          color: #495057;\n        }\n        \n        .empty {\n          text-align: center;\n          color: #6c757d;\n          padding: 32px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TranscriptionStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}