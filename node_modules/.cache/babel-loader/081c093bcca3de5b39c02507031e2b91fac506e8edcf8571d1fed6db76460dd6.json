{"ast":null,"code":"import CryptoJS from'crypto-js';import{v4 as uuidv4}from'uuid';import config from'../config/env';// Local Authentication Service\nconst JWT_SECRET=config.auth.jwtSecret;const SESSION_TIMEOUT=config.auth.sessionTimeout;// Simple JWT-like token generation (for demo purposes)\nconst generateToken=userData=>{const payload={...userData,exp:Date.now()+SESSION_TIMEOUT,iat:Date.now()};// In a real app, you'd use a proper JWT library\nreturn btoa(JSON.stringify(payload));};const decodeToken=token=>{try{return JSON.parse(atob(token));}catch(error){return null;}};// Default users (in a real app, this would be handled by a proper auth service)\nconst DEFAULT_USERS=[{id:1,username:'admin',email:'admin@transkipta.com',password:'admin123',// In production, this would be hashed\nrole:'admin'},{id:2,username:'user',email:'user@transkipta.com',password:'user123',role:'user'}];// Storage keys\nconst STORAGE_KEYS={TOKEN:'transkipta_token',USER:'transkipta_user',USERS:'transkipta_users'};// Initialize default users if not exists\nconst initializeUsers=()=>{const existingUsers=localStorage.getItem(STORAGE_KEYS.USERS);if(!existingUsers){localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(DEFAULT_USERS));}};// Authentication functions\nexport const login=async(username,password)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{initializeUsers();const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');const user=users.find(u=>(u.username===username||u.email===username)&&u.password===password);if(user){const token=generateToken({id:user.id,username:user.username,email:user.email,role:user.role});const userData={id:user.id,username:user.username,email:user.email,role:user.role};localStorage.setItem(STORAGE_KEYS.TOKEN,token);localStorage.setItem(STORAGE_KEYS.USER,JSON.stringify(userData));resolve({token,user:userData});}else{reject(new Error('Credenciais inválidas'));}}catch(error){reject(new Error('Erro interno de autenticação'));}},500);// Simulate network delay\n});};export const logout=()=>{localStorage.removeItem(STORAGE_KEYS.TOKEN);localStorage.removeItem(STORAGE_KEYS.USER);};export const getCurrentUser=()=>{try{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);const userStr=localStorage.getItem(STORAGE_KEYS.USER);if(!token||!userStr){return null;}const tokenData=decodeToken(token);if(!tokenData||tokenData.exp<Date.now()){// Token expired\nlogout();return null;}return JSON.parse(userStr);}catch(error){logout();return null;}};export const getToken=()=>{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);if(!token)return null;const tokenData=decodeToken(token);if(!tokenData||tokenData.exp<Date.now()){logout();return null;}return token;};export const isAuthenticated=()=>{return getCurrentUser()!==null;};export const hasRole=requiredRole=>{const user=getCurrentUser();if(!user)return false;const roleHierarchy={'user':1,'admin':2};const userLevel=roleHierarchy[user.role]||0;const requiredLevel=roleHierarchy[requiredRole]||0;return userLevel>=requiredLevel;};// User management functions\nexport const registerUser=async userData=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{initializeUsers();const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');// Check if user already exists\nconst existingUser=users.find(u=>u.username===userData.username||u.email===userData.email);if(existingUser){reject(new Error('Usuário já existe'));return;}const newUser={id:Date.now(),username:userData.username,email:userData.email,password:userData.password,// In production, hash this\nrole:userData.role||'user',createdAt:new Date().toISOString()};users.push(newUser);localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(users));resolve({message:'Usuário criado com sucesso'});}catch(error){reject(new Error('Erro ao criar usuário'));}},500);});};export const updateUserProfile=async(userId,updateData)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{try{const users=JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS)||'[]');const userIndex=users.findIndex(u=>u.id===userId);if(userIndex===-1){reject(new Error('Usuário não encontrado'));return;}// Update user data\nusers[userIndex]={...users[userIndex],...updateData,updatedAt:new Date().toISOString()};localStorage.setItem(STORAGE_KEYS.USERS,JSON.stringify(users));// Update current user if it's the same user\nconst currentUser=getCurrentUser();if(currentUser&&currentUser.id===userId){const updatedUser={...currentUser,...updateData};localStorage.setItem(STORAGE_KEYS.USER,JSON.stringify(updatedUser));}resolve({message:'Perfil atualizado com sucesso'});}catch(error){reject(new Error('Erro ao atualizar perfil'));}},500);});};// Session management\nexport const refreshSession=()=>{const user=getCurrentUser();if(user){const token=generateToken(user);localStorage.setItem(STORAGE_KEYS.TOKEN,token);return true;}return false;};export const getSessionTimeRemaining=()=>{const token=localStorage.getItem(STORAGE_KEYS.TOKEN);if(!token)return 0;const tokenData=decodeToken(token);if(!tokenData)return 0;const remaining=tokenData.exp-Date.now();return Math.max(0,remaining);};// Initialize on import\ninitializeUsers();","map":{"version":3,"names":["CryptoJS","v4","uuidv4","config","JWT_SECRET","auth","jwtSecret","SESSION_TIMEOUT","sessionTimeout","generateToken","userData","payload","exp","Date","now","iat","btoa","JSON","stringify","decodeToken","token","parse","atob","error","DEFAULT_USERS","id","username","email","password","role","STORAGE_KEYS","TOKEN","USER","USERS","initializeUsers","existingUsers","localStorage","getItem","setItem","login","Promise","resolve","reject","setTimeout","users","user","find","u","Error","logout","removeItem","getCurrentUser","userStr","tokenData","getToken","isAuthenticated","hasRole","requiredRole","roleHierarchy","userLevel","requiredLevel","registerUser","existingUser","newUser","createdAt","toISOString","push","message","updateUserProfile","userId","updateData","userIndex","findIndex","updatedAt","currentUser","updatedUser","refreshSession","getSessionTimeRemaining","remaining","Math","max"],"sources":["C:/Users/Afonso/Desktop/Transkipta/frontend/src/services/authService.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { v4 as uuidv4 } from 'uuid';\nimport config from '../config/env';\n\n// Local Authentication Service\nconst JWT_SECRET = config.auth.jwtSecret;\nconst SESSION_TIMEOUT = config.auth.sessionTimeout;\n\n// Simple JWT-like token generation (for demo purposes)\nconst generateToken = (userData) => {\n  const payload = {\n    ...userData,\n    exp: Date.now() + SESSION_TIMEOUT,\n    iat: Date.now()\n  };\n  \n  // In a real app, you'd use a proper JWT library\n  return btoa(JSON.stringify(payload));\n};\n\nconst decodeToken = (token) => {\n  try {\n    return JSON.parse(atob(token));\n  } catch (error) {\n    return null;\n  }\n};\n\n// Default users (in a real app, this would be handled by a proper auth service)\nconst DEFAULT_USERS = [\n  {\n    id: 1,\n    username: 'admin',\n    email: 'admin@transkipta.com',\n    password: 'admin123', // In production, this would be hashed\n    role: 'admin'\n  },\n  {\n    id: 2,\n    username: 'user',\n    email: 'user@transkipta.com',\n    password: 'user123',\n    role: 'user'\n  }\n];\n\n// Storage keys\nconst STORAGE_KEYS = {\n  TOKEN: 'transkipta_token',\n  USER: 'transkipta_user',\n  USERS: 'transkipta_users'\n};\n\n// Initialize default users if not exists\nconst initializeUsers = () => {\n  const existingUsers = localStorage.getItem(STORAGE_KEYS.USERS);\n  if (!existingUsers) {\n    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(DEFAULT_USERS));\n  }\n};\n\n// Authentication functions\nexport const login = async (username, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        \n        const user = users.find(u => \n          (u.username === username || u.email === username) && u.password === password\n        );\n        \n        if (user) {\n          const token = generateToken({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          });\n          \n          const userData = {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role\n          };\n          \n          localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\n          \n          resolve({ token, user: userData });\n        } else {\n          reject(new Error('Credenciais inválidas'));\n        }\n      } catch (error) {\n        reject(new Error('Erro interno de autenticação'));\n      }\n    }, 500); // Simulate network delay\n  });\n};\n\nexport const logout = () => {\n  localStorage.removeItem(STORAGE_KEYS.TOKEN);\n  localStorage.removeItem(STORAGE_KEYS.USER);\n};\n\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const userStr = localStorage.getItem(STORAGE_KEYS.USER);\n    \n    if (!token || !userStr) {\n      return null;\n    }\n    \n    const tokenData = decodeToken(token);\n    if (!tokenData || tokenData.exp < Date.now()) {\n      // Token expired\n      logout();\n      return null;\n    }\n    \n    return JSON.parse(userStr);\n  } catch (error) {\n    logout();\n    return null;\n  }\n};\n\nexport const getToken = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return null;\n  \n  const tokenData = decodeToken(token);\n  if (!tokenData || tokenData.exp < Date.now()) {\n    logout();\n    return null;\n  }\n  \n  return token;\n};\n\nexport const isAuthenticated = () => {\n  return getCurrentUser() !== null;\n};\n\nexport const hasRole = (requiredRole) => {\n  const user = getCurrentUser();\n  if (!user) return false;\n  \n  const roleHierarchy = {\n    'user': 1,\n    'admin': 2\n  };\n  \n  const userLevel = roleHierarchy[user.role] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n  \n  return userLevel >= requiredLevel;\n};\n\n// User management functions\nexport const registerUser = async (userData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        initializeUsers();\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        \n        // Check if user already exists\n        const existingUser = users.find(u => \n          u.username === userData.username || u.email === userData.email\n        );\n        \n        if (existingUser) {\n          reject(new Error('Usuário já existe'));\n          return;\n        }\n        \n        const newUser = {\n          id: Date.now(),\n          username: userData.username,\n          email: userData.email,\n          password: userData.password, // In production, hash this\n          role: userData.role || 'user',\n          createdAt: new Date().toISOString()\n        };\n        \n        users.push(newUser);\n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n        \n        resolve({ message: 'Usuário criado com sucesso' });\n      } catch (error) {\n        reject(new Error('Erro ao criar usuário'));\n      }\n    }, 500);\n  });\n};\n\nexport const updateUserProfile = async (userId, updateData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n        const userIndex = users.findIndex(u => u.id === userId);\n        \n        if (userIndex === -1) {\n          reject(new Error('Usuário não encontrado'));\n          return;\n        }\n        \n        // Update user data\n        users[userIndex] = {\n          ...users[userIndex],\n          ...updateData,\n          updatedAt: new Date().toISOString()\n        };\n        \n        localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n        \n        // Update current user if it's the same user\n        const currentUser = getCurrentUser();\n        if (currentUser && currentUser.id === userId) {\n          const updatedUser = { ...currentUser, ...updateData };\n          localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\n        }\n        \n        resolve({ message: 'Perfil atualizado com sucesso' });\n      } catch (error) {\n        reject(new Error('Erro ao atualizar perfil'));\n      }\n    }, 500);\n  });\n};\n\n// Session management\nexport const refreshSession = () => {\n  const user = getCurrentUser();\n  if (user) {\n    const token = generateToken(user);\n    localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n    return true;\n  }\n  return false;\n};\n\nexport const getSessionTimeRemaining = () => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (!token) return 0;\n  \n  const tokenData = decodeToken(token);\n  if (!tokenData) return 0;\n  \n  const remaining = tokenData.exp - Date.now();\n  return Math.max(0, remaining);\n};\n\n// Initialize on import\ninitializeUsers();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}